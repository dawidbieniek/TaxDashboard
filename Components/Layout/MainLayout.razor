@inherits LayoutComponentBase
@implements IAsyncDisposable

<aside class="aside">
    <nav class="navbar navbar-vertical align-items-stretch">
        <div class="container">
            <span class="navbar-brand m-0 mb-2 fw-bold fs-4 p-0">TaxDashboard</span>
            <nav class="navbar-nav nav-pills">
                <div class="nav-item">
                    <a class="nav-link active" data-bs-toggle="collapse" data-bs-target="#dashboards">
                        <i class="bi-speedometer2"></i>
                        Dashboard
                    </a>
                    <div id="dashboards" class="collapse show">
                        <nav class="nav-pills">
                            <a class="nav-link active" href="/" onclick="console.log()">Rozliczenia</a>
                            <a class="nav-link" href="/data">Dane</a>
                        </nav>
                    </div>
                </div>
                <div class="nav-item">
                    <a class="nav-link" href="/">
                        <i class="bi-list"></i>
                        Lista klientów
                    </a>
                </div>
                <div class="nav-item">
                    <a class="nav-link" href="/">
                        <i class="bi-gear-fill"></i>
                        Ustawienia
                    </a>
                </div>
            </nav>
        </div>
    </nav>
</aside>

<content>
    @Body
</content>

@code {
    [Inject]
    public IJSRuntime JS { get; set; } = default!;
    private IJSObjectReference _module = default!;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Layout/MainLayout.razor.js");
            await _module.InvokeVoidAsync("AddEventListeners");
        }

        base.OnAfterRender(firstRender);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if(_module is not null)
        {
            try
            {
                await _module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {}
    }
    }
}