@using TaxDashboard.Services.Notifications
@inject ClientsService ClientsService

<nav class="navbar navbar-expand sticky-top align-items-start bg-light border-black border-bottom border-2 px-2">
    <div class="dropdown flex-grow-0 flex-shrink-0">
        <input class="form-select@(_incorrectClientName ? " border border-1 border-danger" : "")" style="min-height:38px; width:14rem;" list="clientList" type="text" placeholder="@(_allClients.Any() ? "Klient" : "Brak klientów")" autocomplete="on" @onchange="ChangeSelectedClient" value="@(StartingClient?.FullName ?? "")" />
        <datalist id="clientList">
            @foreach (Client client in _allClients)
            {
                <option>@client.FullName</option>
            }
        </datalist>
    </div>
    <NotificationIcon PopoverText="@_notificationText" Severity="@_notificationSeverity" ShowWhenEmptyMessage="false" OccupySpaceWhenEmptyMessage="true" />
    @if (ShowDateSelector && _selectedClient is not null)
    {
        <ContextDateSelector ClientSettlements="@(_selectedClient?.Settlements ?? [])" StartingDateContext="@StartingDateContext" OnSelectedDateContextChanged="ChangeSelectedDateContext" />
        <div class="flex-grow-1" />
        <SettlementButton Client="@_selectedClient" ContextDate="@_contextDate" OnSettlementStateChanged="@(() => StateHasChanged())" />
    }
</nav>


@code {
    private Client? _selectedClient;
    private bool _incorrectClientName = false;
    private IEnumerable<Client> _allClients = [];

    private DateOnly? _contextDate;

    private string? _notificationText = string.Empty;
    private NotificationSeverity _notificationSeverity = NotificationSeverity.None;

    [Parameter]
    public Client? StartingClient { get; set; }
    [Parameter]
    public EventCallback<Client> OnSelectedClientChanged { get; set; }
    [Parameter]
    public bool ShowDateSelector { get; set; } = true;
    [Parameter]
    public DateOnly? StartingDateContext { get; set; }
    [Parameter]
    public EventCallback<DateOnly> OnSelectedDateContextChanged { get; set; }
    [Parameter]
    public EventCallback OnSettlementStateChanged { get; set; }

    /// <summary>
    /// Refreshes the view and requeries selected client. Won't notify about client change
    /// </summary>
    public async Task RefreshAsync()
    {
        if (_selectedClient is not null)
            _selectedClient = await ClientsService.GetAsync(_selectedClient.Id);

        ShowClientNotificationIconIfNesessary();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _allClients = (await ClientsService.GetAllAsync())
            .Where(c => !c.Suspended);

        if (StartingClient is not null)
        {
            _selectedClient = StartingClient;
            _incorrectClientName = false;

            ShowClientNotificationIconIfNesessary();
        }
        else
            _incorrectClientName = true;
    }

    private void ChangeSelectedClient(ChangeEventArgs e)
    {
        bool clientFound = SelectClientFromName((string)e.Value!);
        _incorrectClientName = !clientFound;

        if (clientFound)
            ShowClientNotificationIconIfNesessary();
    }

    private bool SelectClientFromName(string name)
    {
        foreach (Client client in _allClients)
        {
            if (client.FullName.Equals(name, StringComparison.OrdinalIgnoreCase))
            {
                _selectedClient = client;
                OnSelectedClientChanged.InvokeAsync(_selectedClient);
                return true;
            }
        }

        return false;
    }

    private async Task ChangeSelectedDateContext(DateOnly dateContext)
    {
        _contextDate = dateContext;
        StateHasChanged();
        await OnSelectedDateContextChanged.InvokeAsync(dateContext);
    }

    private void ShowClientNotificationIconIfNesessary()
    {
        if (_selectedClient is null)
        {
            _notificationText = string.Empty;
            _notificationSeverity = NotificationSeverity.None;
            return;
        }

        NotificationInfo info = ClientNotificationService.GetClientReductionNotification(_selectedClient);
        _notificationText = info.Message;
        _notificationSeverity = info.Severity;
    }
}
