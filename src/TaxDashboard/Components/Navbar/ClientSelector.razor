@using TaxDashboard.Services.Notifications

@inject ClientsService ClientsService

<nav class="navbar navbar-expand sticky-top align-items-start bg-light border-black border-bottom border-2 px-2">
    <div class="dropdown flex-grow-0 flex-shrink-0">
        <input class="form-select@(_incorrectClientName ? " border border-1 border-danger" : "")" style="width:14rem;"
               list="clientList"
               type="text"
               placeholder="@(_allClients.Any() ? "Klient" : "Brak klientów")"
               autocomplete="on"
               @onchange="ChangeSelectedClient"
               value="@(StartingClient?.FullName ?? "")"
               onclick="this.select();" />
        <datalist id="clientList">
            @foreach (Client client in _allClients)
            {
                <option>@client.FullName</option>
            }
        </datalist>
    </div>

    <button class="btn navigation-button" @onclick="@(() => ChangeSelectedClient(_selectedClientIndex - 1))"
            disabled="@(LockClientNavigationButtons || _selectedClientIndex <= 0)">
        <i class="bi-chevron-left" />
    </button>
    <button class="btn navigation-button" @onclick="@(() => ChangeSelectedClient(_selectedClientIndex + 1))"
            disabled="@(LockClientNavigationButtons || _selectedClientIndex >= (_allClients.Count - 1) || _selectedClientIndex < 0)">
        <i class="bi-chevron-right" />
    </button>

    <div class="align-self-center flex-shrink-0 mx-2">
        <ClientSelectorNotificationIcon @ref="@_notificationIconRef" SelectedClient="_selectedClient" />
    </div>

    @if (ShowDateSelector && _selectedClient is not null)
    {
        <ContextDateSelector ClientSettlements="@(_selectedClient.Settlements)"
                             StartingDateContext="@StartingDateContext" OnSelectedDateContextChanged="ChangeSelectedDateContext"
                             JoinDateTime="@_selectedClient.JoinDateTime" />
        <div class="flex-grow-1" />
        <SettlementButton Client="@_selectedClient" ContextDate="@_contextDate?.Date" OnSettlementStateChanged="@(() => StateHasChanged())" Disabled="@(_contextDate?.IsValid ?? false)" />
    }
</nav>


@code {
    private Client? _selectedClient;
    private ContextDate? _contextDate;
    private List<Client> _allClients = [];
    private bool _incorrectClientName = false;
    private int _selectedClientIndex = -1;

    private ClientSelectorNotificationIcon? _notificationIconRef;

    [Parameter]
    public Client? StartingClient { get; set; }
    [Parameter]
    public EventCallback<Client> OnSelectedClientChanged { get; set; }
    [Parameter]
    public bool LockClientNavigationButtons { get; set; } = false;

    [Parameter]
    public bool ShowDateSelector { get; set; } = true;
    [Parameter]
    public DateOnly? StartingDateContext { get; set; }
    [Parameter]
    public EventCallback<ContextDate> OnSelectedDateContextChanged { get; set; }

    /// <summary>
    /// Refreshes the view and requeries selected client. Won't notify about client change
    /// </summary>
    public async Task RefreshAsync()
    {
        if (_selectedClient is not null)
            _selectedClient = await ClientsService.GetAsync(_selectedClient.Id);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _allClients = (await ClientsService.GetAllAsync())
            .Where(c => !c.Suspended)
            .OrderBy(c => c.FullName)
            .ToList();

        if (StartingClient is not null)
        {
            _selectedClient = StartingClient;
            _selectedClientIndex = Math.Max(_allClients.Select(c => c.Id).ToList().IndexOf(_selectedClient.Id), 0);

            _incorrectClientName = false;
        }
        else
            _incorrectClientName = true;
    }

    private void ChangeSelectedClient(int allClientIndex)
    {
        if (allClientIndex < 0 || allClientIndex >= _allClients.Count || LockClientNavigationButtons)
            return;

        _selectedClient = _allClients[allClientIndex];
        OnSelectedClientChanged.InvokeAsync(_selectedClient);
        _selectedClientIndex = allClientIndex;

        _incorrectClientName = false;
    }

    private void ChangeSelectedClient(ChangeEventArgs e)
    {
        bool clientFound = SelectClientFromName((string)e.Value!);
        _incorrectClientName = !clientFound;
    }

    private bool SelectClientFromName(string name)
    {
        foreach (Client client in _allClients)
        {
            if (client.FullName.Equals(name, StringComparison.OrdinalIgnoreCase))
            {
                _selectedClient = client;
                OnSelectedClientChanged.InvokeAsync(_selectedClient);
                return true;
            }
        }

        return false;
    }

    private async Task ChangeSelectedDateContext(ContextDate dateContext)
    {
        _contextDate = dateContext;
        await OnSelectedDateContextChanged.InvokeAsync(dateContext);
    }
}