@using System.ComponentModel.DataAnnotations
@using TaxDashboard.Services.Notifications

@inject ClientsService ClientsService
@inject IJSRuntime JS

<div>
    <MudAppBar Color="Color.Dark" Fixed>
        <MudAutocomplete @ref="_autocompleteRef" T="Client" Class="client-selector"
                         ToStringFunc="c => c?.FullName ?? string.Empty"
                         @bind-Value="_autocompleteClient" @bind-Value:after="ChangeSelectedClientAndBlurAsync"
                         SearchFunc="AutocompleteSearchFunction"
                         CoerceText ResetValueOnEmptyText Clearable
                         Placeholder="@(_allClients.Any() ? "Wybierz klienta" : "Brak klientów")" />

        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                       OnClick="() => ChangeSelectedClientByIndex(_selectedClientIndex - 1)"
                       Disabled="@(LockClientNavigationButtons || _selectedClientIndex <= 0)" />
        <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                       OnClick="() => ChangeSelectedClientByIndex(_selectedClientIndex + 1)"
                       Disabled="@(LockClientNavigationButtons || _selectedClientIndex >= (_allClients.Count - 1) || _selectedClientIndex < 0)" />

        <ClientSelectorNotificationIcon SelectedClient="_selectedClient" />

        @if (ShowDateSelector && _selectedClient is not null)
        {
            <ContextDateSelector ClientSettlements="@(_selectedClient.Settlements)"
                                 StartingDateContext="@StartingDateContext" OnSelectedDateContextChanged="ChangeSelectedDateContext"
                                 JoinDateTime="@_selectedClient.JoinDateTime" />
            <MudSpacer />
            <SettlementButton Client="@_selectedClient" ContextDate="@_contextDate?.Date" OnSettlementStateChanged="@(() => StateHasChanged())" Disabled="@(_contextDate?.IsValid ?? false)" />
        }
    </MudAppBar>
</div>


@code {
    private Client? _autocompleteClient;
    private Client? _selectedClient;
    private ContextDate? _contextDate;
    private List<Client> _allClients = [];
    private int _selectedClientIndex = -1;

    private MudAutocomplete<Client> _autocompleteRef = default!;

    private Client? AutocompleteClient
    {
        get => _autocompleteClient;
        set
        {
            _autocompleteClient = value;
            if (value is not null)
                _selectedClient = value;
        }
    }

    [Parameter]
    public Client? StartingClient { get; set; }
    [Parameter]
    public EventCallback<Client> OnSelectedClientChanged { get; set; }
    [Parameter]
    public bool LockClientNavigationButtons { get; set; } = false;

    [Parameter]
    public bool ShowDateSelector { get; set; } = true;
    [Parameter]
    public DateOnly? StartingDateContext { get; set; }
    [Parameter]
    public EventCallback<ContextDate> OnSelectedDateContextChanged { get; set; }

    /// <summary>
    /// Refreshes the view and requeries selected client. Won't notify about client change
    /// </summary>
    public async Task RefreshAsync()
    {
        if (_selectedClient is not null)
            AutocompleteClient = await ClientsService.GetAsync(_selectedClient.Id);

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _allClients = (await ClientsService.GetAllAsync())
            .Where(c => !c.Suspended)
            .OrderBy(c => c.FullName)
            .ToList();

        AutocompleteClient = StartingClient;
        _selectedClientIndex = GetClientIndex(_selectedClient);
    }

    private void ChangeSelectedClientByIndex(int newClientIndex)
    {
        if (newClientIndex < 0 || newClientIndex >= _allClients.Count || LockClientNavigationButtons)
            return;

        AutocompleteClient = _allClients[newClientIndex];
        _selectedClientIndex = newClientIndex;
        OnSelectedClientChanged.InvokeAsync(_selectedClient);
    }

    private Task ChangeSelectedClientAndBlurAsync()
    {
        if (AutocompleteClient is null)
            return Task.CompletedTask;

        _selectedClientIndex = GetClientIndex(_selectedClient);

        return Task.WhenAll(
            OnSelectedClientChanged.InvokeAsync(_selectedClient),
            _autocompleteRef.BlurAsync().AsTask());
    }

    private Task<IEnumerable<Client>> AutocompleteSearchFunction(string value, CancellationToken token) => Task.Run(() =>
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return _allClients;

        return _allClients.Where(x => x.FullName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    });

    private int GetClientIndex(Client? client) => client is not null
        ? _allClients.FindIndex(c => c.Id == client.Id)
        : -1;

    private async Task ChangeSelectedDateContext(ContextDate dateContext)
    {
        _contextDate = dateContext;
        await OnSelectedDateContextChanged.InvokeAsync(dateContext);
    }
}