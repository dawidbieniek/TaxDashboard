@inject ClientsService ClientsService

<MudButton Class="ms-2 flex-shrink-0" Style="height:38px; width:8rem;"
           Variant="ButtonChecked ? Variant.Filled : Variant.Outlined" Color=" ButtonChecked ? Color.Success : Color.Warning"
           OnClick="ChangeSettlementState"
           Disabled="@DisableButton">
    @(ButtonChecked ? "Rozliczony" : "Nierozliczony")
</MudButton>

@code {
    private Settlement? _currentSettlement;

    private ChangeTracker<DateOnly?> _contextDateChangeTracker = new();

    [Parameter, EditorRequired]
    public Client Client { get; set; } = default!;
    [Parameter, EditorRequired]
    public DateOnly? ContextDate { get; set; }
    [Parameter]
    public bool Disabled { get; set; } = false;
    [Parameter]
    public EventCallback OnSettlementStateChanged { get; set; }

    private bool DisableButton => ContextDate is null || Disabled;
    private bool ButtonChecked => _currentSettlement is not null;


    protected override void OnParametersSet()
    {
        if (_contextDateChangeTracker.HasChanged(ContextDate))
            _currentSettlement = ContextDate.HasValue ? Client.Settlements.FirstOrDefault(s => s.ContextDate == ContextDate) : null;
    }

    private async Task ChangeSettlementState()
    {
        if (ButtonChecked)
        {
            Client.Settlements.Remove(_currentSettlement!);
            _currentSettlement = null;
            await UpdateSettlement();
        }
        else
        {
            _currentSettlement = new() { ContextDate = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1), };
            Client.Settlements.Add(_currentSettlement);
            await UpdateSettlement();
        }
    }

    private async Task UpdateSettlement()
    {
        await ClientsService.UpdateWithRelatedEntitiesAsync(Client);
        await OnSettlementStateChanged.InvokeAsync();
    }
}