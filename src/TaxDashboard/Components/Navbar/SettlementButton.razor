@inject ClientsService ClientsService

<div class="flex-grow-0 flex-shrink-0 ms-2">
    <input type="checkbox" class="btn-check visually-hidden" id="settlement" @bind="@CurrentSettlementValue">
    <label class="btn btn-outline-secondary toggle-button" style="height:38px; width:8rem;" for="settlement"><b>@(CurrentSettlementValue ? "Rozliczony" : "Nierozliczony")</b></label>
</div>

@code {
    private Settlement? _currentSettlement;

    private ChangeTracker<DateOnly?> _contextDateChangeTracker = new();

    [Parameter, EditorRequired]
    public Client Client { get; set; } = default!;
    [Parameter, EditorRequired]
    public DateOnly? ContextDate { get; set; }
    [Parameter]
    public EventCallback OnSettlementStateChanged { get; set; }


    private bool CurrentSettlementValue
    {
        get => _currentSettlement is not null;
        set
        {
            if (value && _currentSettlement is null)
            {
                _currentSettlement = new() { ContextDate = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1), };
                Client.Settlements.Add(_currentSettlement);
                UpdateSettlement();
            }
            else if (_currentSettlement is not null)
            {
                Client.Settlements.Remove(_currentSettlement);
                _currentSettlement = null;
                UpdateSettlement();
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (_contextDateChangeTracker.HasChanged(ContextDate))
            _currentSettlement = ContextDate.HasValue ? Client.Settlements.FirstOrDefault(s => s.ContextDate == ContextDate) : null;
    }

    private async void UpdateSettlement()
    {
        await ClientsService.UpdateWithRelatedEntitiesAsync(Client);
        await OnSettlementStateChanged.InvokeAsync();
    }
}