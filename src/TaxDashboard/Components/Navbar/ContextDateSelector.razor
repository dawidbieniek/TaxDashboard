<select class="form-select flex-grow-0 flex-shrink-0" style="width:6rem;" @onchange="ChangeSelectedYear" value="@_selectedYear">
    @foreach (int year in SelectableYears)
    {
        <option class="@(year < JoinDateTime.Year ? "text-muted" : "")" value="@year" selected="@(_selectedYear == year)">@year</option>
    }
</select>

<div class="d-flex gap-0 ms-2 flex-shrink-1 flex-wrap month-button-group">
    @for (int i = 1; i <= 12; i++)
    {
        string id = $"month{i}";
        int monthValue = i;

        @if (_selectedMonth == i)
        {
            <input type="radio" class="btn-check" name="months" id="@id" autocomplete="off"
            @onclick="@(() => ChangeSelectedMonth(monthValue))" checked>
        }
        else
        {
            <input type="radio" class="btn-check" name="months" id="@id" autocomplete="off"
            @onclick="@(() => ChangeSelectedMonth(monthValue))">
        }
        <label class="btn month-button @(GetMonthButtonClass(monthValue))" for="@id">
            @(DataDisplayHelper.GetMonthLabel(i))
        </label>
    }
</div>
<select class="form-select month-dropdown ms-2 flex-grow-0 flex-shrink-0" style="width:9rem;" @onchange="@((e) => ChangeSelectedMonth(int.Parse((string)e.Value!)))" value="@_selectedMonth">
    @for (int i = 1; i <= 12; i++)
    {
        int monthValue = i;

        @if (_selectedMonth == i)
        {
            <option class="@(GetMonthButtonClass(monthValue))" value="@i" selected>@DataDisplayHelper.GetMonthFullLabel(i)</option>
        }
        else
        {
            <option class="@(GetMonthButtonClass(monthValue))" value="@i">@DataDisplayHelper.GetMonthFullLabel(i)</option>
        }
    }
</select>

@code {

    private static readonly int[] SelectableYears = [2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035];

    private int _selectedMonth;
    private int _selectedYear;

    [Parameter]
    public DateOnly? StartingDateContext { get; set; }
    [Parameter]
    public EventCallback<ContextDate> OnSelectedDateContextChanged { get; set; }
    [Parameter, EditorRequired]
    public IEnumerable<Settlement> ClientSettlements { get; set; } = [];
    [Parameter, EditorRequired]
    public DateTime JoinDateTime { get; set; }


    protected override void OnInitialized()
    {
        if (StartingDateContext.HasValue)
        {
            _selectedMonth = StartingDateContext.Value.Month;
            _selectedYear = StartingDateContext.Value.Year;
        }
        else
        {
            _selectedYear = SelectableYears[0];
            _selectedMonth = 1;
        }
        UpdateSelectedContextDate();
    }

    private void ChangeSelectedMonth(int month)
    {
        _selectedMonth = month;

        UpdateSelectedContextDate();
    }

    private void ChangeSelectedYear(ChangeEventArgs e)
    {
        _selectedYear = int.Parse((string)e.Value!);

        UpdateSelectedContextDate();
    }

    private void UpdateSelectedContextDate()
    {
        DateOnly dateContext = new(_selectedYear, _selectedMonth, 1);
            OnSelectedDateContextChanged.InvokeAsync(new(dateContext, IsDateDisabled(dateContext.Month, dateContext.Year)));
    }

    private string GetMonthButtonClass(int monthValue) =>  IsMonthDisabled(monthValue) ? "text-muted"
        : ClientSettlements.Any(s => s.ContextDate.Year == _selectedYear && s.ContextDate.Month == monthValue)
                ? "text-success"
                : "text-warning";

    private bool IsMonthDisabled(int monthValue) => IsDateDisabled(monthValue, _selectedYear);
    private bool IsDateDisabled(int monthValue, int year) => year < JoinDateTime.Year || (year == JoinDateTime.Year && monthValue < JoinDateTime.Month);
}