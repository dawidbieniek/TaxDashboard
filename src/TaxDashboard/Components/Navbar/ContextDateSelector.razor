<div class="d-flex flex-row">
    <MudSelect T="int" Class="me-2" Value="@_selectedYear" ValueChanged="ChangeSelectedYear">
        @foreach (int year in SelectableYears)
        {
            <MudSelectItem Style="@(year < JoinDateTime.Year ? "color:var(--mud-palette-text-disabled)" : "")" Value="@year">@year</MudSelectItem>
        }
    </MudSelect>

    <MudStack Row Spacing="1" Class="month-group">
        @for (int i = 1; i <= 12; i++)
        {
            int monthValue = i;

            @if (_selectedMonth == i)
            {
                <MudButton Variant="Variant.Filled" Color="GetMonthButtonColor(monthValue)" Class="month-button" OnClick="() => ChangeSelectedMonth(monthValue)">
                    @(DataDisplayHelper.GetMonthLabel(monthValue))
                </MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Outlined" Color="GetMonthButtonColor(monthValue)" Class="month-button" OnClick="() => ChangeSelectedMonth(monthValue)">
                    @(DataDisplayHelper.GetMonthLabel(monthValue))
                </MudButton>
            }
        }
    </MudStack>
</div>
@code {

    private static readonly int[] SelectableYears = [2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035];

    private int _selectedMonth;
    private int _selectedYear;

    [Parameter]
    public DateOnly? StartingDateContext { get; set; }
    [Parameter]
    public EventCallback<ContextDate> OnSelectedDateContextChanged { get; set; }
    [Parameter, EditorRequired]
    public IEnumerable<Settlement> ClientSettlements { get; set; } = [];
    [Parameter, EditorRequired]
    public DateTime JoinDateTime { get; set; }


    protected override void OnInitialized()
    {
        if (StartingDateContext.HasValue)
        {
            _selectedMonth = StartingDateContext.Value.Month;
            _selectedYear = StartingDateContext.Value.Year;
        }
        else
        {
            _selectedYear = SelectableYears[0];
            _selectedMonth = 1;
        }
        UpdateSelectedContextDate();
    }

    private void ChangeSelectedMonth(int month)
    {
        _selectedMonth = month;

        UpdateSelectedContextDate();
    }

    private void ChangeSelectedYear(int value)
    {
        _selectedYear = value;
        UpdateSelectedContextDate();
    }

    private void UpdateSelectedContextDate()
    {
        DateOnly dateContext = new(_selectedYear, _selectedMonth, 1);
        OnSelectedDateContextChanged.InvokeAsync(new(dateContext, IsDateDisabled(dateContext.Month, dateContext.Year)));
    }

    private MudBlazor.Color GetMonthButtonColor(int monthValue) => IsMonthDisabled(monthValue) ? Color.Default
    : ClientSettlements.Any(s => s.ContextDate.Year == _selectedYear && s.ContextDate.Month == monthValue)
            ? Color.Success
            : Color.Warning;

    private bool IsMonthDisabled(int monthValue) => IsDateDisabled(monthValue, _selectedYear);
    private bool IsDateDisabled(int monthValue, int year) => year < JoinDateTime.Year || (year == JoinDateTime.Year && monthValue < JoinDateTime.Month);
}