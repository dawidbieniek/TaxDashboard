@using ApexCharts

@inject IJSRuntime JS

<div class="d-flex flex-column align-items-center justify-content-center h-100">
    <ElementRequiringLoad @ref="@_loadingRef">
        <ApexChart @ref="@_chartRef" TItem="GaugeValue" OnBeforeMount="@(() => _loadingRef.HideLoadingIcon())">
            <ApexPointSeries TItem="GaugeValue"
            SeriesType=SeriesType.RadialBar
            Items=@([new GaugeValue {Percentage = Math.Round(Math.Min(Value / ValueLimit * 100, 100)), Label = Label}])
            Name="@Label"
            XValue="@(e => e.Label)"
            YValue="@(e => e.Percentage)" />
        </ApexChart>
        <div id="@_tooltipId" class="h5 w-100 text-center@(_valueClass)"
        data-bs-toggle="tooltip"
        data-bs-html="true"
        data-bs-original-title="@($"{Value:C} / {ValueLimit:C}{(string.IsNullOrEmpty(TooltipAdditionalText) ? "" : $"<br/>{TooltipAdditionalText}")}")">
            @Value.ToString("C2", GlobalSettings.CurrencyCulture)
        </div>
    </ElementRequiringLoad>
</div>

@code {
    private const decimal WarningColorPercentage = 0.8M;

    private string _valueClass = string.Empty;

    private ApexChart<GaugeValue> _chartRef = default!;
    private ElementRequiringLoad _loadingRef = default!;

    private string _tooltipId = Guid.NewGuid().ToString();

    private decimal _oldValue = decimal.MinValue;
    private decimal _oldValueLimit = decimal.MinValue;

    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public decimal Value { get; set; }
    [Parameter]
    public decimal ValueLimit { get; set; } = 10;
    [Parameter]
    public string TooltipAdditionalText { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("enableTooltip", _tooltipId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Value >= ValueLimit * WarningColorPercentage)
        {
            if (Value >= ValueLimit)
                _valueClass = " text-danger";
            else
                _valueClass = " text-warning";
        }
        else
            _valueClass = string.Empty;

        bool updateChart = false;
        if (_oldValue != Value)
        {
            _oldValue = Value;
            updateChart = true;
        }
        if (_oldValueLimit != ValueLimit)
        {
            _oldValueLimit = ValueLimit;
            updateChart = true;
        }
        if (updateChart && _chartRef is not null)
            await _chartRef.UpdateSeriesAsync();
    }

    public Task UpdateChartAsync() => Task.CompletedTask;// _chartRef.UpdateSeriesAsync();
}
