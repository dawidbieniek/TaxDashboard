@page "/data"

@using TaxDashboard.Components.Loading
@using TaxDashboard.Components.Navbar
@using TaxDashboard.Components.FormInputs
@using TaxDashboard.Components.Pages.Dashboard.Components
@using TaxDashboard.Components.Popups
@using TaxDashboard.Data.Enums
@using TaxDashboard.Services.Notifications
@using TaxDashboard.Util

@inherits DashboardPageBase

@inject BanksService BanksService
@inject IJSRuntime JS

<LoadingContentsComponent Initialized="@Initialized">
    <ClientSelector @ref="_clientSelectorRef" ShowDateSelector="false" StartingClient="@Client" OnSelectedClientChanged="ChangeSelectedClient" LockClientNavigationButtons="@(_clientEditContext.IsModified())" />

    @if (Client is null)
    {
        <NoClientAlert />
    }
    else
    {
        <EditForm EditContext="_clientEditContext" class="container-fluid flex-row mt-2" OnValidSubmit="UpdateClientAsync" onkeypress="if(event.keyCode==13){document.activeElement.blur();return false;}">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" Disabled="!_clientEditContext.IsModified() && !_clientEditContext.GetValidationMessages().Any()">Zapisz zmiany</MudButton>
                </MudItem>
                <MudItem xs="4">
                    @* General *@
                    <MudCard Class="compact-card" Elevation="4" Outlined>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Dane</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudStack Row="true">
                                    <MudTextField Label="Imię" InputType="InputType.Text" @bind-Value="Client.Name" For="@(() => Client.Name)" Required />
                                    <MudTextField Label="Nazwisko" InputType="InputType.Text" @bind-Value="Client.Surname" For="@(() => Client.Surname)" Required />
                                </MudStack>
                                <MudStack Row="true">
                                    <MudTextField Label="Telefon" InputType="InputType.Telephone" @bind-Value="Client.PhoneNumber" For="@(() => Client.PhoneNumber)" />
                                    <MudTextField Label="Email" InputType="InputType.Email" @bind-Value="Client.Email" For="@(() => Client.Email)" />
                                </MudStack>
                                <MudSelect Label="Płeć" @bind-Value="Client.Gender">
                                    @foreach (var gender in Enum.GetValues<Gender>())
                                    {
                                        <MudSelectItem Value="@gender">@gender.GetDescriptor()</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudDatePicker Label="Data założenia" @bind-Date="Client.JoinDateTimeNullable" ShowToolbar="false" Clearable="true" />
                                <MudTextField Label="NIP" InputType="InputType.Text" @bind-Value="@Client.NIP" For="@(() => Client.NIP)" Mask="@(new PatternMask("000-000-00-00"))" Immediate="true" MaxLength="13" Clearable="true" />
                                <MudSelect Label="Bank" @bind-Value="Client.Bank">
                                    @foreach (var bank in _allBanks)
                                    {
                                        <MudSelectItem Value="@bank">@bank.Name</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSwitch Label="Umowa o pracę" @bind-Value="Client.EmploymentContract" />
                                <MudSwitch Label="Metoda kasowa" @bind-Value="Client.CashMethod" />
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="4">
                    @* Subscription *@
                    <MudCard Class="compact-card" Elevation="4" Outlined>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Abonament</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudTextField Label="Abonament" InputType="InputType.Text" @bind-Value="Client.Subscription" For="@(() => Client.Subscription)" />
                                <MudNumericField Label="Kwota autoryzacyjna" @bind-Value="Client.AuthorizationPrice" For="@(() => Client.AuthorizationPrice)" Format="C2" T="decimal" Immediate="false" />
                                <MudNumericField Label="Koszt abonamentu" @bind-Value="Client.SubscriptionPrice" For="@(() => Client.SubscriptionPrice)" Format="C2" T="decimal" Immediate="false" />
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                    @* VAT *@
                    <MudCard Class="compact-card" Elevation="4" Outlined>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">VAT</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudSwitch Label="Rozlicza VAT" @bind-Value="Client.VAT" />
                                <MudSelect Label="Sposób opłacania VAT" @bind-Value="Client.VATPaymentType" Disabled="!Client.VAT">
                                    @foreach (var vat in Enum.GetValues<PaymentType>())
                                    {
                                        <MudSelectItem Value="@vat">@vat.GetDescriptor()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem xs="4">
                    @* Tax settings *@
                    <MudCard Class="compact-card" Elevation="4" Outlined>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Podatki</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudSelect Label="Podatek" @bind-Value="Client.TaxType">
                                    @foreach (var taxType in Enum.GetValues<TaxType>())
                                    {
                                        <MudSelectItem Value="@taxType">@taxType.GetDescriptor()</MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSelect Label="Sposób rozliczania PIT" @bind-Value="Client.PITPaymentType">
                                    @foreach (var pit in Enum.GetValues<PaymentType>())
                                    {
                                        <MudSelectItem Value="@pit">@pit.GetDescriptor()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                    @* Reduction settings *@
                    <MudCard Class="compact-card" Elevation="4" Outlined>
                        <MudCardHeader>
                            <MudText Typo="Typo.h6">Ulgi</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="3">
                                <MudStack Row="true">
                                    <MudSelect Label="Ulga" @bind-Value="Client.ReductionType">
                                        @foreach (var reductionType in Enum.GetValues<ReductionType>())
                                        {
                                            <MudSelectItem Value="@reductionType">@reductionType.GetDescriptor()</MudSelectItem>
                                        }
                                    </MudSelect>
                                    @if (_showReductionWarning)
                                    {
                                        <NotificationIcon PopoverText="@($"Klient przekroczył {ClientsService.ZusPlusLimit} w roku {Client.ReductionChangeDate.Year - 1}")" Severity="@NotificationSeverity.Danger" />
                                    }
                                </MudStack>
                                <MudTooltip Text="Klient nie jest na Małym ZUSie Plus" ShowOnHover="Client.ReductionType != ReductionType.ZUSPlus">
                                    <MudDatePicker Label="Data przejścia" @bind-Date="Client.ReductionChangeDateNullable" ShowToolbar="false" Disabled="Client.ReductionType != ReductionType.ZUSPlus" />
                                </MudTooltip>
                                <MudTooltip Text="Klient nie używa kas fiskalnych" ShowOnHover="!Client.UseCashRegister">
                                    <MudDatePicker Label="Data pierwszej transakcji fiskalnej" @bind-Date="Client.FirstCashRegisterUseDateNullable" ShowToolbar="false" Disabled="!Client.UseCashRegister" />
                                </MudTooltip>
                                <MudDatePicker Label="Koniec ulgi" Date="Client.LastDayOfReductionNullable" Disabled="true" />
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </EditForm>
    }
</LoadingContentsComponent>
<!-- Modal -->
<TaxDashboard.Components.Dialogs.UnsavedContextChecker NavigationBlockCondition="@(() => _clientEditContext is not null && _clientEditContext.IsModified())" />

@code {
    private List<Bank> _allBanks = [];
    private EditContext _clientEditContext = default!;

    private ClientSelector? _clientSelectorRef;

    private bool _showReductionWarning = false;

    protected override Client? Client
    {
        get => base.Client;
        set
        {
            if (value == base.Client)
                return;

            base.Client = value;

            if (value is not null)
                _clientEditContext = new(value!);
        }
    }

    public ClientDataPage()
    {
        // Even if form is not displayed, edit context must be initialized
        _clientEditContext = new(new Client() { Bank = null!, JoinDateTime = DateTime.Now, });
    }

    protected override async Task OnInitializedAsync()
    {
        _allBanks = [.. await BanksService.GetAllAsync()];
        await base.OnInitializedAsync();
    }

    private async Task UpdateClientAsync()
    {
        if (Client is not null && _clientEditContext.IsModified())
        {
            _clientEditContext = new(Client);
            await ClientsService.UpdateWithRelatedEntitiesAsync(Client);

            await _clientSelectorRef!.RefreshAsync();
        }
    }

    private void UpdateReductionWarning()
    {
        _showReductionWarning = Client is null
        ? false
        : Client.ReductionType != ReductionType.ZUSPlus
            ? false
            : ClientsService.GetZusIncomeSum(Client, Client.ReductionChangeDate.AddYears(-1)) > ClientsService.ZusPlusLimit;
    }
}