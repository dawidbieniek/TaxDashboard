@page "/data"

@using TaxDashboard.Components.Loading
@using TaxDashboard.Components.Navbar
@using TaxDashboard.Components.FormInputs
@using TaxDashboard.Components.Pages.Dashboard.Components
@using TaxDashboard.Components.Popups
@using TaxDashboard.Data.Enums
@using TaxDashboard.Util

@inherits DashboardPageBase

@inject BanksService BanksService
@inject IJSRuntime JS

<LoadingContentsComponent Initialized="@Initialized">
    <ClientSelector @ref="_clientSelectorRef" ShowDateSelector="false" StartingClient="@Client" OnSelectedClientChanged="ChangeSelectedClient" LockClientNavigationButtons="@(_clientEditContext.IsModified())" />

    @if (Client is null || _clientEditContext is null)
    {
        <NoClientAlert />
    }
    else
    {
        <EditForm EditContext="_clientEditContext" class="container-fluid flex-row mt-2" OnValidSubmit="UpdateClientAsync" onkeypress="if(event.keyCode==13){document.activeElement.blur();return false;}">
            <DataAnnotationsValidator />
            <div class="row mb-2">
                <div class="col-12 d-flex flex-row">
                    <button class="btn btn-primary@(_clientEditContext.IsModified() && !_clientEditContext.GetValidationMessages().Any() ? "" : " disabled")" style="width:9rem;" type="submit">Zapisz zmiany</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-lg-6 col-xl-4">
                    @* General *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Dane</h5>
                            <p class="text-body-secondary mb-2">Ogólne informacje o kliencie</p>
                            <div class="d-flex gap-2">
                                <div class="col mb-2">
                                    <label class="form-label" for="name">Imię</label>
                                    <InputText id="name" class="form-control" @bind-Value="Client.Name" onclick="this.select();" required />
                                    <ValidationMessage For="@(()=> Client.Name)" />
                                </div>
                                <div class="col mb-2">
                                    <label class="form-label" for="surname">Nazwisko</label>
                                    <InputText id="surname" class="form-control" @bind-Value="Client.Surname" onclick="this.select();" required />
                                    <ValidationMessage For="@(()=> Client.Surname)" />
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <div class="col mb-2">
                                    <label class="form-label" for="phone">Telefon</label>
                                    <InputText id="phone" class="form-control" type="tel" @bind-Value="Client.PhoneNumber" autocomplete="off" onclick="this.select();" />
                                    <ValidationMessage For="@(()=> Client.PhoneNumber)" />
                                </div>
                                <div class="col mb-2">
                                    <label class="form-label" for="email">Email</label>
                                    <InputText id="email" class="form-control" type="email" @bind-Value="Client.Email" autocomplete="off" onclick="this.select();" />
                                    <ValidationMessage For="@(()=> Client.Email)" />
                                </div>
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="date">Data założenia</label>
                                <InputDate id="date" class="form-control" @bind-Value="Client.JoinDateTime" />
                                <ValidationMessage For="@(()=> Client.JoinDateTime)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="nip">NIP</label>
                                <InputText id="nip" class="form-control" @bind-Value="Client.NIP" autocomplete="off" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.NIP)" />
                            </div>
                            <div class="col mb-3">
                                <label class="form-label" for="bank">Bank</label>
                                <InputClassSelect id="bank" class="form-select" @bind-Value="@Client.Bank" Options="@_allBanks" Selector="v => v.Name" />
                                <ValidationMessage For="@(()=> Client.Bank)" />
                            </div>
                            <div class="col mb-3 form-check form-switch" style="margin-top:26px;">
                                <label class="form-check-label" for="employmentContract">Umowa o pracę</label>
                                <InputCheckbox id="employmentContract" class="form-check-input" type="checkbox" @bind-Value="Client.EmploymentContract" />
                            </div>
                            <div class="col form-check form-switch">
                                <label class="form-check-label" for="cashMethod">Metoda kasowa</label>
                                <InputCheckbox id="cashMethod" class="form-check-input" type="checkbox" @bind-Value="Client.CashMethod" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-6 col-xl-4">
                    @* Subscription *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Abonament</h5>
                            <p class="text-body-secondary mb-2">Dane abonamentu klienta</p>
                            <div class="col mb-2">
                                <label class="form-label" for="subscription">Typ abonamentu</label>
                                <InputText id="subscription" class="form-control" @bind-Value="Client.Subscription" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.Subscription)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="authCost">Kwota autoryzacyjna</label>
                                <InputText id="authCost" class="form-control" @bind-Value="AuthorizationPrice" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.AuthorizationPrice)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="subCost">Koszt abonamentu</label>
                                <InputText id="subCost" class="form-control" @bind-Value="SubscriptionPrice" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.SubscriptionPrice)" />
                            </div>
                        </div>
                    </div>
                    @* VAT *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">VAT</h5>
                            <p class="text-body-secondary mb-2">Dane VAT klienta</p>
                            <div class="col mb-2 form-check form-switch">
                                <label class="form-check-label" for="vat">Rozlicza VAT</label>
                                <InputCheckbox id="vat" class="form-check-input" type="checkbox" @bind-Value="Client.VAT" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="vatType">Sposób opłacania VAT</label>
                                <InputClassSelect disabled="@(!Client.VAT)" id="vatType" class="form-select" @bind-Value="@Client.VATPaymentType" Options="@(Enum.GetValues<PaymentType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.VATPaymentType)" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-6 col-xl-4">
                    @* Tax settings *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Ustawienia podatkowe</h5>
                            <p class="text-body-secondary mb-2">Dane rozliczania podatku klienta</p>
                            <div class="col mb-2">
                                <label class="form-label" for="taxType">Podatek</label>
                                <InputClassSelect id="taxType" class="form-select" @bind-Value="@Client.TaxType" Options="@(Enum.GetValues<TaxType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.TaxType)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="pit">Sposób rozliczania PIT</label>
                                <InputClassSelect id="pit" class="form-select" @bind-Value="@Client.PITPaymentType" Options="@(Enum.GetValues<PaymentType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.PITPaymentType)" />
                            </div>
                        </div>
                    </div>
                    @* Reduction settings *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title" style="margin-bottom:27px;">Ulgi</h5>
                            <div class="col mb-2">
                                <InputClassSelect id="reductionType" class="form-select" @bind-Value="@Client.ReductionType" Options="@(Enum.GetValues<ReductionType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.ReductionType)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="reductionDate">Data przejścia</label>
                                <InputDate id="reductionDate" class="form-control" @bind-Value="Client.ReductionChangeDate" required />
                                <ValidationMessage For="@(()=> Client.ReductionChangeDate)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="transactionDate">Data pierwszej transakcji fiskalnej</label>
                                @if (Client.UseCashRegister)
                                {
                                    <InputDate id="transactionDate" class="form-control" @bind-Value="Client.FirstCashRegisterUseDate" required />
                                }
                                else
                                {
                                    <input type="date" id="transactionDate" class="form-control" disabled data-bs-toggle="tooltip" data-bs-title="Klient nie używa kas fiskalnych" />
                                }
                                <ValidationMessage For="@(()=> Client.FirstCashRegisterUseDate)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</LoadingContentsComponent>
<!-- Modal -->
<PreventNavigationModal NavigationBlockCondition="@(() => _clientEditContext is not null && _clientEditContext.IsModified())" />

@code {
    private List<Bank> _allBanks = [];
    private EditContext _clientEditContext = default!;

    private ClientSelector? _clientSelectorRef;

    protected override Client? Client
    {
        get => base.Client;
        set
        {
            if (value == base.Client)
                return;

            base.Client = value;

            if (value is not null)
                _clientEditContext = new(value!);
        }
    }

    private string AuthorizationPrice
    {
        get => Client!.AuthorizationPrice.ToString("C2");
        set
        {
            if (Decimal.TryParse(value, GlobalSettings.CurrencyNumberStyles, GlobalSettings.CurrencyCulture, out decimal currency))
                Client!.AuthorizationPrice = Math.Round(currency, 2);
        }
    }

    private string SubscriptionPrice
    {
        get => Client!.SubscriptionPrice.ToString("C2");
        set
        {
            if (Decimal.TryParse(value, GlobalSettings.CurrencyNumberStyles, GlobalSettings.CurrencyCulture, out decimal currency))
                Client!.SubscriptionPrice = Math.Round(currency, 2);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allBanks = [.. await BanksService.GetAllAsync()];
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("enableTooltips");

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateClientAsync()
    {
        if (Client is not null && _clientEditContext.IsModified())
        {
            _clientEditContext = new(Client);
            await ClientsService.UpdateWithRelatedEntitiesAsync(Client);

            await _clientSelectorRef!.RefreshAsync();
        }
    }
}