@using ApexCharts
@using TaxDashboard.Components.Loading
@using TaxDashboard.Services.Notifications

@inject IJSRuntime JS

<div style="display:flex; flex-direction:column; align-items:center; justify-content:center; height:100%">
<ElementRequiringLoad @ref="@_loadingRef">
    <MudStack Class="h-100">
        <ApexChart @ref="@_chartRef" TItem="GaugeValue" OnBeforeMount="@(() => _loadingRef.HideLoadingIcon())">
            <ApexPointSeries TItem="GaugeValue"
                             SeriesType=SeriesType.RadialBar
                             Items=@([new GaugeValue {Percentage = Math.Round(Math.Min(Value / ValueLimit * 100, 100)), Label = Label}])
                             Name="@Label"
                             XValue="@(e => e.Label)"
                             YValue="@(e => e.Percentage)" />
        </ApexChart>
        <div class="mx-auto">
            <MudTooltip Arrow Placement="Placement.Top">
                <ChildContent>
                    <MudStack Row Class="align-center">
                        <MudText Typo="Typo.body1">@Value.ToString("C2", GlobalSettings.CurrencyCulture)</MudText>
                        <NotificationIcon Dense ShowWhenEmptyMessage="false" PopoverLocation="right" PopoverText="@_notificationText" Severity="@_notificationSeverity" />
                    </MudStack>
                </ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.body1">@Value.ToString("C") / @ValueLimit.ToString("C")</MudText>
                    @if (!string.IsNullOrEmpty(TooltipAdditionalText))
                    {
                        <br />
                        <MudText Typo="Typo.body1">@TooltipAdditionalText</MudText>
                    }
                </TooltipContent>
            </MudTooltip>
        </div>
    </MudStack>
</ElementRequiringLoad>
</div>

@code {
    private const decimal WarningColorPercentage = 0.8M;

    private string _valueClass = string.Empty;

    private ApexChart<GaugeValue> _chartRef = default!;
    private ElementRequiringLoad _loadingRef = default!;

    private string _tooltipId = Guid.NewGuid().ToString();
    private NotificationSeverity _notificationSeverity;
    private string _notificationText = string.Empty;

    private decimal _oldValue = decimal.MinValue;
    private decimal _oldValueLimit = decimal.MinValue;

    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public decimal Value { get; set; }
    [Parameter]
    public decimal ValueLimit { get; set; } = 10;
    [Parameter]
    public string TooltipAdditionalText { get; set; } = string.Empty;
    [Parameter]
    public string PopoverWarningText { get; set; } = string.Empty;
    [Parameter]
    public string PopoverDangerText { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("enableTooltip", _tooltipId);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Value >= ValueLimit * WarningColorPercentage)
        {
            if (Value >= ValueLimit)
            {
                _notificationSeverity = NotificationSeverity.Danger;
                _notificationText = PopoverDangerText;
            }
            else
            {
                _notificationSeverity = NotificationSeverity.Warning;
                _notificationText = PopoverWarningText;
            }
        }
        else
        {
            _notificationSeverity = NotificationSeverity.None;
            _notificationText = string.Empty;
        }

        // _valueClass = _notificationSeverity.TextClass();

        bool updateChart = false;
        if (_oldValue != Value)
        {
            _oldValue = Value;
            updateChart = true;
        }
        if (_oldValueLimit != ValueLimit)
        {
            _oldValueLimit = ValueLimit;
            updateChart = true;
        }
        if (updateChart && _chartRef is not null)
            await _chartRef.UpdateSeriesAsync();
    }
}