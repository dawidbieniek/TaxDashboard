@using ApexCharts
@using TaxDashboard.Components.Loading
@using TaxDashboard.Components.Pages.Dashboard.Model

@inject ClientsService ClientsService

<ElementRequiringLoad @ref="@_incomeLoadingRef">
    <ApexChart @ref="_incomeChartRef" TItem="IncomeData" Height="@("236px")" XAxisType="XAxisType.Category" OnBeforeMount="@(() => _incomeLoadingRef.HideLoadingIcon())">
        <ApexPointSeries TItem="IncomeData"
                         Name="Przychody"
                         Items="@_incomesDataSeries"
                         SeriesType="@SeriesType.Area"
                         ShowDataLabels
                         XValue="@(e => DataDisplayHelper.GetMonthLabel(e.Month))"
                         YAggregate="@(e => e.Sum(e => e.Amount))" />
    </ApexChart>
    <MudNumericField Style="max-width:12rem;" Label="Przychody w tym miesiącu" Format="C2" T="decimal"
                     @bind-Value="@CurrentMonthIncome" @bind-Value:after="UpdateClientAsync"
                     Disabled="@Disabled" DebounceInterval="500" Immediate="false"
                     onclick="this.select();" />
</ElementRequiringLoad>

@code {
    private ElementRequiringLoad _incomeLoadingRef = default!;
    private ApexChart<IncomeData> _incomeChartRef = default!;

    private List<IncomeData> _incomesDataSeries = [.. Enumerable.Range(1, 12).Select(month => new IncomeData(month))];
    private Income? _currentMonthIncome;

    private ChangeTracker<int?> _clientChangeTracker = new();
    private ChangeTracker<DateOnly?> _contextDateYearChangeTracker = new();

    [Parameter, EditorRequired]
    public Client Client { get; set; } = default!;
    [Parameter, EditorRequired]
    public DateOnly? ContextDate { get; set; }
    [Parameter]
    public bool Disabled { get; set; } = false;
    [Parameter]
    public EventCallback<List<IncomeData>> OnYearlyIncomesChanged { get; set; }

    private decimal CurrentMonthIncome
    {
        get => _currentMonthIncome?.Amount ?? 0;
        set
        {
            if (Client is null || !ContextDate.HasValue)
                return;

            if (value == 0)
            {
                if (_currentMonthIncome is not null)
                {
                    Client.Incomes.Remove(_currentMonthIncome);
                    _currentMonthIncome = null;
                }
            }
            else
            {
                if (_currentMonthIncome is not null)
                    _currentMonthIncome.Amount = Math.Round(value, 2);
                else
                {
                    _currentMonthIncome = new() { Date = ContextDate.Value };
                    Client.Incomes.Add(_currentMonthIncome);
                }

                _currentMonthIncome.Amount = Math.Round(value, 2);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await UpdateIncomesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if ((_clientChangeTracker.HasChanged(Client?.Id) || _contextDateYearChangeTracker.HasChanged(ContextDate)) && _incomeChartRef is not null)
            await UpdateIncomesAsync();
    }

    private async Task UpdateClientAsync()
    {
        await ClientsService.UpdateWithRelatedEntitiesAsync(Client);
        await UpdateIncomesAsync();
        await OnYearlyIncomesChanged.InvokeAsync(_incomesDataSeries);
    }

    private async Task UpdateIncomesAsync()
    {
        _currentMonthIncome = ContextDate.HasValue ? Client?.Incomes.Where(i => i.Date == ContextDate.Value).FirstOrDefault() : null;

        UpdateIncomesDataSeries();
        await UpdateChartsAsync();
    }

    private void UpdateIncomesDataSeries()
    {
        IEnumerable<Income> clientIncomes = ContextDate.HasValue && Client is not null ? Client.Incomes.Where(i => i.Date.Year == ContextDate.Value.Year) : [];

        foreach (IncomeData data in _incomesDataSeries)
        {
            Income? currentIncome = clientIncomes.FirstOrDefault(i => i.Date.Month == data.Month);
            data.Amount = currentIncome is not null ? currentIncome.Amount : 0;
        }
    }

    private Task UpdateChartsAsync() => _incomeChartRef.UpdateSeriesAsync();
}
