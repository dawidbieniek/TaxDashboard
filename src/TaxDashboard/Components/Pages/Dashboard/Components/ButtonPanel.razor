@using TaxDashboard.Components.FormInputs

@inject ClientsService ClientsService

<MudGrid>
    <MudItem xs="6">
        <CheckButton Class="toggle-button" Label="VAT-R" @bind-Value="Client.VATRHandled" @bind-Value:after="@UpdateClientAsync" />
    </MudItem>
    <MudItem xs="6">
        <CheckButton Class="toggle-button" Label="CEIDG-1" @bind-Value="Client.CEIDG1Handled" @bind-Value:after="@UpdateClientAsync" />
    </MudItem>
    <MudItem xs="6">
        <CheckButton Class="toggle-button" Label="ZUS" @bind-Value="Client.ZUSHandled" @bind-Value:after="@UpdateClientAsync" />
    </MudItem>
    <MudItem xs="6">
        <CheckButton Class="toggle-button" Label="Zafakturowany" @bind-Value="Client.Invoiced" @bind-Value:after="@UpdateClientAsync" />
    </MudItem>

    <MudItem xs="6">
        @{
            string zusDraAdditionalText = Client.ZUSDraHandledDate is not null ? Client.ZUSDraHandledDate.Value.ToString(DateFormat) : "";
            <CheckButton Class="toggle-button" Label="@($"ZUS DRA {zusDraAdditionalText}")" @bind-Value="ZusDraValue" @bind-Value:after="@UpdateClientAsync" />
        }
    </MudItem>
    <MudItem xs="6">
        @{
            string taxAdditionalText = Client.TaxHandledDate is not null ? Client.TaxHandledDate.Value.ToString(DateFormat) : "";
            <CheckButton Class="toggle-button" Label="@($"Podatek {taxAdditionalText}")" @bind-Value="TaxValue" @bind-Value:after="@UpdateClientAsync" />
        }
    </MudItem>
    <MudItem xs="6">
        @{
            string jpkAdditionalText = _currentJpkV7 is not null ? _currentJpkV7.ChangedDateTime.ToString(DateFormat) : "";
            <CheckButton Class="toggle-button" Label="@($"JPK V7 {jpkAdditionalText}")" @bind-Value="CurrentJpkV7Exists" @bind-Value:after="@UpdateClientAsync" />
        }
    </MudItem>
    <MudItem xs="6">
        @{
            string vatUeAdditionalText = _currentVatUe is not null ? _currentVatUe.ChangedDateTime.ToString(DateFormat) : "";
            <CheckButton Class="toggle-button" Label="@($"VAT UE {vatUeAdditionalText}")" @bind-Value="CurrentVatUeExists" @bind-Value:after="@UpdateClientAsync" />
        }
    </MudItem>
</MudGrid>

@code {
    private const string DateFormat = "\nyyyy-MM-dd\nHH:mm";

    private JPKV7? _currentJpkV7;
    private VATUE? _currentVatUe;

    private Client? _lastClientValue = null;
    private DateOnly? _lastContextDateValue = null;

    [Parameter, EditorRequired]
    public Client Client { get; set; } = default!;
    [Parameter, EditorRequired]
    public DateOnly? ContextDate { get; set; }
    [Parameter]
    public bool Disabled { get; set; } = false;

    private bool CurrentJpkV7Exists
    {
        get => _currentJpkV7 is not null;
        set
        {
            if (value)
            {
                if (_currentJpkV7 is not null)
                    _currentJpkV7.ChangedDateTime = DateTime.Now;
                else
                {
                    _currentJpkV7 = new()
                        {
                            ContextDate = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                            ChangedDateTime = DateTime.Now,
                            Client = Client
                        };
                    Client.JPKV7HandledDates.Add(_currentJpkV7);
                }
            }
            else if (_currentJpkV7 is not null)
            {
                Client.JPKV7HandledDates.Remove(_currentJpkV7);
                _currentJpkV7 = null;

            }
        }
    }

    private bool CurrentVatUeExists
    {
        get => _currentVatUe is not null;
        set
        {
            if (value)
            {
                if (_currentVatUe is not null)
                    _currentVatUe.ChangedDateTime = DateTime.Now;
                else
                {
                    _currentVatUe = new()
                        {
                            ContextDate = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                            ChangedDateTime = DateTime.Now,
                            Client = Client
                        };
                    Client.VATUEHandledDates.Add(_currentVatUe);
                }
            }
            else if (_currentVatUe is not null)
            {
                Client.VATUEHandledDates.Remove(_currentVatUe);
                _currentVatUe = null;
            }
        }
    }

    private bool TaxValue
    {
        get => Client.TaxHandledDate is not null;
        set => Client.TaxHandledDate = value ? DateTime.Now : null;
    }

    private bool ZusDraValue
    {
        get => Client.ZUSDraHandledDate is not null;
        set => Client.ZUSDraHandledDate = value ? DateTime.Now : null;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            UpdateContextBoundDates();
    }

    protected override void OnParametersSet()
    {
        bool changed = false;
        if (_lastClientValue != Client)
        {
            _lastClientValue = Client;
            changed = true;
        }
        if (_lastContextDateValue != ContextDate)
        {
            _lastContextDateValue = ContextDate;
            changed = true;
        }

        if (changed)
            UpdateContextBoundDates();
    }

    private Task UpdateClientAsync() => ClientsService.UpdateWithRelatedEntitiesAsync(Client);

    private void UpdateContextBoundDates()
    {
        _currentJpkV7 = ContextDate.HasValue ? Client.JPKV7HandledDates.FirstOrDefault(i => i.ContextDate == ContextDate) : null;
        _currentVatUe = ContextDate.HasValue ? Client.VATUEHandledDates.FirstOrDefault(i => i.ContextDate == ContextDate) : null;
    }
}
