@using ApexCharts
@using TaxDashboard.Components.Loading
@using TaxDashboard.Data.Enums

@inject ClientsService ClientsService

<h5 class="card-title mb-2">Faktury</h5>
<ElementRequiringLoad @ref="@_invoiceLoadingRef">
    <ApexChart @ref="_invoiceChartRef" TItem="InvoiceData" Height="@("236px")" XAxisType="XAxisType.Category" OnBeforeMount="@(() => _invoiceLoadingRef.HideLoadingIcon())">
        <ApexPointSeries TItem="InvoiceData"
                         Name="Sprzedażowe"
                         Items="_sellInvoicesDataSeries"
                         SeriesType="@SeriesType.Bar"
                         ShowDataLabels
                         XValue="@(e => DataDisplayHelper.GetMonthLabel(e.Month))"
                         YAggregate="@(e => e.Sum(e => e.Amount))" />
        <ApexPointSeries TItem="InvoiceData"
                         Name="Kosztowe"
                         Items="_costInvoicesDataSeries"
                         SeriesType="@SeriesType.Bar"
                         ShowDataLabels
                         XValue="@(e => DataDisplayHelper.GetMonthLabel(e.Month))"
                         YAggregate="@(e => e.Sum(e => e.Amount))" />
    </ApexChart>
    <div class="d-flex gap-2">
        <div>
            <label class="form-label" for="sell">Sprzedażowe</label>
            <InputNumber id="sell" class="form-control" style="max-width:12rem;" @bind-Value="@CurrentSellInvoiceAmount" @bind-Value:after="UpdateClientAsync" autocomplete="off" disabled="@Disabled" onclick="this.select();" />
        </div>
        <div>
            <label class="form-label" for="cost">Kosztowe</label>
            <InputNumber id="cost" class="form-control" style="max-width:12rem;" @bind-Value="@CurrentCostInvoiceAmount" @bind-Value:after="UpdateClientAsync" autocomplete="off" disabled="@Disabled" onclick="this.select();" />
        </div>
    </div>
</ElementRequiringLoad>

@code {
    private ApexChart<InvoiceData> _invoiceChartRef = default!;
    private ElementRequiringLoad _invoiceLoadingRef = default!;

    private InvoiceCount? _currentSellInvoice;
    private InvoiceCount? _currentCostInvoice;
    private List<InvoiceData> _sellInvoicesDataSeries = [.. Enumerable.Range(1, 12).Select(month => new InvoiceData(month))];
    private List<InvoiceData> _costInvoicesDataSeries = [.. Enumerable.Range(1, 12).Select(month => new InvoiceData(month))];

    private ChangeTracker<int?> _clientChangeTracker = new();
    private ChangeTracker<int?> _contextDateYearChangeTracker = new();
    private ChangeTracker<DateOnly?> _contextDateChangeTracker = new();

    [Parameter, EditorRequired]
    public Client Client { get; set; } = default!;
    [Parameter, EditorRequired]
    public DateOnly? ContextDate { get; set; }
    [Parameter]
    public bool Disabled { get; set; } = false;

    private int CurrentSellInvoiceAmount
    {
        get => _currentSellInvoice?.Amount ?? 0;
        set
        {
            if (value == 0)
            {
                if (_currentSellInvoice is not null)
                {
                    Client.Invoices.Remove(_currentSellInvoice);
                    _currentSellInvoice = null;
                }
            }
            else
            {
                if (_currentSellInvoice is not null)
                    _currentSellInvoice.Amount = value;
                else
                {
                    _currentSellInvoice = new()
                        {
                            Type = Data.Enums.InvoiceType.Sell,
                            Amount = value,
                            Date = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                        };
                    Client.Invoices.Add(_currentSellInvoice);
                }
            }
        }
    }

    private int CurrentCostInvoiceAmount
    {
        get => _currentCostInvoice?.Amount ?? 0;
        set
        {
            if (value == 0)
            {
                if (_currentCostInvoice is not null)
                {
                    Client.Invoices.Remove(_currentCostInvoice);
                    _currentCostInvoice = null;
                }
            }
            else
            {
                if (_currentCostInvoice is not null)
                    _currentCostInvoice.Amount = value;
                else
                {
                    _currentCostInvoice = new()
                        {
                            Type = Data.Enums.InvoiceType.Cost,
                            Amount = value,
                            Date = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                        };
                    Client.Invoices.Add(_currentCostInvoice);
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await UpdateInvoicesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_contextDateChangeTracker.HasChanged(ContextDate))
            UpdateInvoiceInputs();

        if ((_clientChangeTracker.HasChanged(Client?.Id) || _contextDateYearChangeTracker.HasChanged(ContextDate?.Year)) && _invoiceChartRef is not null)
            await UpdateInvoicesAsync();
    }

    private async Task UpdateClientAsync()
    {
        await ClientsService.UpdateWithRelatedEntitiesAsync(Client);
        await UpdateInvoicesAsync();
    }

    private void UpdateInvoiceInputs()
    {
        _currentSellInvoice = ContextDate.HasValue ? Client.Invoices.FirstOrDefault(i => i.Type == InvoiceType.Sell && i.Date == ContextDate) : null;
        _currentCostInvoice = ContextDate.HasValue ? Client.Invoices.FirstOrDefault(i => i.Type == InvoiceType.Cost && i.Date == ContextDate) : null;
    }

    private async Task UpdateInvoicesAsync()
    {
        UpdateInvoicesDataSeries(InvoiceType.Sell);
        UpdateInvoicesDataSeries(InvoiceType.Cost);
        await UpdateChartAsync();
    }

    private void UpdateInvoicesDataSeries(InvoiceType type)
    {
        List<InvoiceData> seriesToUpdate = type == InvoiceType.Sell ? _sellInvoicesDataSeries : _costInvoicesDataSeries;

        IEnumerable<InvoiceCount> clientInvoices = ContextDate.HasValue ? Client.Invoices.Where(i => i.Type == type && i.Date.Year == ContextDate.Value.Year) : [];

        foreach (InvoiceData data in seriesToUpdate)
        {
            InvoiceCount? currentInvoice = clientInvoices.FirstOrDefault(i => i.Date.Month == data.Month);
            data.Amount = currentInvoice is not null ? currentInvoice.Amount : 0;
        }
    }

    private Task UpdateChartAsync() => _invoiceChartRef.UpdateSeriesAsync();


    private class InvoiceData(int month)
    {
        public int Amount { get; set; } = 0;
        public int Month { get; set; } = month;
    }
}