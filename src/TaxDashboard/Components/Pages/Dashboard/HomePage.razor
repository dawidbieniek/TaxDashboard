@page "/"

@using TaxDashboard.Components.Loading
@using TaxDashboard.Components.Navbar
@using ApexCharts
@using TaxDashboard.Components.Pages.Dashboard.Components
@using TaxDashboard.Components.Pages.Dashboard.Model

@inherits DashboardPageBase

<LoadingContentsComponent Initialized="@Initialized">
    <ClientSelector StartingClient="@Client" StartingDateContext="@ContextDate" OnSelectedClientChanged="ChangeSelectedClient" OnSelectedDateContextChanged="ChangeDateContext" />

    @if (Client is null)
    {
        <NoClientAlert />
    }
    else
    {
        <div class="container-fluid flex-row mt-3">
            <div class="row">
                <div class="col-12 col-xl-3">
                    <div class="row row-cols-1 row-cols-md-2 row-cols-xl-1">
                        @* VAT gauge *@
                        <div class="col">
                            <div class="card bg-light mb-4">
                                <div class="card-body gauge-card">
                                    <div style="height:25px" />
                                    <GaugeChart Label="Limit do VAT" Value="@(_currentYearIncomes.Sum(i => i.Amount))" ValueLimit="@_vatGaugeLimit"
                                                TooltipAdditionalText="@(ContextDate.HasValue && Client.JoinDateTime.Year == ContextDate.Value.Year ? $"Limit liczony od: {Client.JoinDateTime.ToShortDateString()}" : "")"
                                                PopoverWarningText="@($"Klient <i>{Client.FullName}</i> niedługo przekroczy limit VAT.<br/>Kliknij <a href='/email/new?clientId={Client.Id}'>tutaj</a>, aby go poinformować")"
                                                PopoverDangerText="@($"Klient <i>{Client.FullName}</i> przekroczył limit VAT.<br/>Kliknij <a href='/email/new?clientId={Client.Id}'>tutaj</a>, aby go poinformować")" />
                                </div>
                            </div>
                        </div>
                        @* Fiscal gauge *@
                        <div class="col">
                            <div class="card bg-light mb-4">
                                <div class="card-body gauge-card">
                                    <div class="col form-check form-switch" style="margin-top:-.5rem;">
                                        <label class="form-check-label overflow-hidden" style="height:1.5rem;" for="cashMethod">Używaj kasy fiskalnej</label>
                                        <InputCheckbox id="cashMethod" class="form-check-input" type="checkbox" @bind-Value="Client.UseCashRegister" @bind-Value:after="@(() => ClientsService.UpdateAsync(Client))" />
                                    </div>
                                    @if (Client.UseCashRegister)
                                    {
                                        decimal fiscalValue;
                                        string fiscalTooltip = string.Empty;

                                        if (Client.FirstCashRegisterUseDate.Year == DateTime.Today.Year)
                                        {
                                            fiscalValue = _currentYearIncomes.Where(i => i.Month >= Client.FirstCashRegisterUseDate.Month).Sum(i => i.Amount);
                                            fiscalTooltip = $"Liczone od: {Client.FirstCashRegisterUseDate.ToShortDateString()}";
                                        }
                                        else
                                            fiscalValue = _currentYearIncomes.Sum(i => i.Amount);

                                        <GaugeChart Label="Kasy fiskalne" Value="@fiscalValue" ValueLimit="@FiscalGaugeLimit" TooltipAdditionalText="@fiscalTooltip"
                                                    PopoverWarningText="@($"Klient <i>{Client.FullName}</i> niedługo przekroczy limit kasowy.<br/>Kliknij <a href='/email/new?clientId={Client.Id}'>tutaj</a>, aby go poinformować")"
                                                    PopoverDangerText="@($"Klient <i>{Client.FullName}</i> przekroczył limit kasowy.<br/>Kliknij <a href='/email/new?clientId={Client.Id}'>tutaj</a>, aby go poinformować")" />
                                    }
                                    else
                                    {
                                        <div class="text-secondary text-center w-100 mt-5">Klient nie używa kasy fiskalnej</div>
                                    }
                                </div>
                            </div>
                        </div>
                        @* ZUS gauge *@
                        <div class="col">
                            <div class="card bg-light mb-4">
                                <div class="card-body gauge-card">
                                    <div style="height:25px" />
                                    @if (Client.ReductionType == Data.Enums.ReductionType.ZUSPlus)
                                    {
                                        <GaugeChart Label="Mały ZUS Plus" Value="@_zusIncomeSum" ValueLimit="@ZusGaugeLimit"
                                                    TooltipAdditionalText="@(_zusIncomesStartDate is null ? "" : $"Liczone od {_zusIncomesStartDate.Value.ToShortDateString()} do {_zusIncomesStartDate.Value.AddYears(1).ToShortDateString()}")"
                                                    PopoverWarningText="@($"Klient <i>{Client.FullName}</i> niedługo przekroczy limit ZUS.<br/>Kliknij <a href='/email/new?clientId={Client.Id}'>tutaj</a>, aby go poinformować")"
                                                    PopoverDangerText="@($"Klient <i>{Client.FullName}</i> przekroczył limit ZUS.<br/>Kliknij <a href='/email/new?clientId={Client.Id}'>tutaj</a>, aby go poinformować")" />
                                    }
                                    else
                                    {
                                        <div class="text-secondary text-center w-100 mt-5">Klient nie jest na Małym ZUSie Plus</div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-xl-9">
                    @* Income chart *@
                    <div class="card bg-light mb-4">
                        <div class="card-body chart-card">
                            <IncomesCard Client="@Client" ContextDate="@ContextDate" OnYearlyIncomesChanged="@((v) => UpdateIncomesAsync(v))" />
                        </div>
                    </div>
                    @* Invoices *@
                    <div class="card bg-light mb-4">
                        <div class="card-body chart-card">
                            <InvoicesCard Client="@Client" ContextDate="@ContextDate" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg">
                    @* Button panel *@
                    <div class="card bg-light mb-4 mb-lg-2">
                        <ButtonPanel Client="@Client" ContextDate="@ContextDate" />
                    </div>
                </div>
                <div class="col-lg mb-2">
                    @* Notes *@
                    <div class="card bg-light h-100 p-3" style="min-height:224px">
                        <h5 class="card-title">Notatki</h5>
                        <InputTextArea class="form-control h-100" style="resize:none;overflow-y:auto" @bind-Value="@Client.Notes" @bind-Value:after="@(() => ClientsService.UpdateAsync(Client))" />
                    </div>
                </div>
            </div>
        </div>
    }
</LoadingContentsComponent>

@code {
    private const decimal BaseVatGaugeLimit = 200_000;
    private const decimal FiscalGaugeLimit = 20_000;
    private const decimal ZusGaugeLimit = 120_000;

    private List<IncomeData> _currentYearIncomes = [];

    private decimal _zusIncomeSum = 0;
    private DateTime? _zusIncomesStartDate;
    private decimal _vatGaugeLimit = BaseVatGaugeLimit;

    protected override async Task OnAfterRequiredInitializedAsync()
    {
        await UpdateIncomesAsync();
        UpdateGaugeChartLimits();
    }

    protected override async Task ChangeDateContext(DateOnly date)
    {
        await base.ChangeDateContext(date);

        await UpdateIncomesAsync();
        UpdateGaugeChartLimits();
    }

    protected override async Task ChangeSelectedClient(Client client)
    {
        await base.ChangeSelectedClient(client);

        await UpdateIncomesAsync();
        UpdateGaugeChartLimits();
    }

    private async Task UpdateIncomesAsync(List<IncomeData>? incomes = null)
    {
        _currentYearIncomes = incomes is null ? GetCurrentYearIncomes(ContextDate) : incomes;

        if (Client is not null && Client.ReductionType == Data.Enums.ReductionType.ZUSPlus && ContextDate.HasValue)
        {
            int yearsToAdd = Math.Max(ContextDate.Value.Year - Client.ReductionChangeDate.Year, 0);
            _zusIncomesStartDate = Client.JoinDateTime.AddYears(yearsToAdd);
            DateTime endDate = _zusIncomesStartDate.Value.AddYears(1);
            _zusIncomeSum = await ClientsService.GetIncomeSumAsync(Client.Id, new(_zusIncomesStartDate.Value.Year, _zusIncomesStartDate.Value.Month, 1), new(endDate.Year, endDate.Month, 1));
        }
    }

    private List<IncomeData> GetCurrentYearIncomes(DateOnly? date)
    {
        int year = date.HasValue ? date.Value.Year : 1;

        IEnumerable<IncomeData> monthlyIncomes = Enumerable.Range(1, 12)
            .Select(month => new IncomeData(month));

        if (Client is null || !date.HasValue)
            return [.. monthlyIncomes];

        IEnumerable<Income> existingIncomes = Client!.Incomes
            .Where(i => i.Date.Year == year);

        return monthlyIncomes
            .Select(monthlyIncome =>
            {
                Income? income = existingIncomes.FirstOrDefault(existingIncome => existingIncome.Date.Month == monthlyIncome.Month && existingIncome.Date.Year == year);
                return income is not null ? new IncomeData(monthlyIncome.Month, income.Amount) : monthlyIncome;
            })
            .ToList();
    }

    private void UpdateGaugeChartLimits()
    {
        if (Client is null || !ContextDate.HasValue)
        {
            _vatGaugeLimit = 0;
            return;
        }

        if (Client.JoinDateTime.Year == ContextDate.Value.Year)
        {
            TimeSpan timeUntilEndOfYear = new DateTime(Client.JoinDateTime.Year, 12, 31) - Client.JoinDateTime;
            int numberOfDaysUntilEndOfYear = Math.Max((int)timeUntilEndOfYear.TotalDays, 1);
            int numberOfDaysInYear = new System.Globalization.GregorianCalendar().GetDaysInYear(Client.JoinDateTime.Year);
            _vatGaugeLimit = Math.Round(BaseVatGaugeLimit * numberOfDaysUntilEndOfYear / numberOfDaysInYear, 2);
        }
        else
            _vatGaugeLimit = BaseVatGaugeLimit;
    }
}