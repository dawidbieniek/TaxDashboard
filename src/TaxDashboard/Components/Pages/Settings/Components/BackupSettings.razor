@using TaxDashboard.Components.Popups
@using TaxDashboard.Util

@inject BackupService BackupService
@inject ISnackbar Snackbar

<MudCard Elevation="3">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Kopia zapasowa</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudStack Spacing="2">
            <MudStack Row="true" Class="setting-item">
                <MudStack Spacing="0">
                    <MudStack Row="true">
                        <MudText Typo="Typo.body1"><b>Ostatni zapis</b></MudText>
                        <MudChip T="string" Size="Size.Small" Class="ma-0">Co @_backupPeriodString</MudChip>
                    </MudStack>
                    <MudText Typo="Typo.body2">Data i godzina ostatniej automatycznej kopii zapasowej</MudText>
                </MudStack>
                <MudSpacer />
                <MudText Typo="Typo.body1" Class="setting-data setting-data-fixed">@_lastBackupDateTimeString</MudText>
            </MudStack>
            <MudDivider />
            <MudStack Row="true" Class="setting-item">
                <MudStack Spacing="0">
                    <MudText Typo="Typo.body1"><b>Lokalizacja</b></MudText>
                    <MudText Typo="Typo.body2">Miejsce zapisu danych</MudText>
                </MudStack>
                <MudSpacer />
                <MudText Typo="Typo.body1" Class="setting-data setting-data-fixed overflow-x-auto">@FileSystem.Current.AppDataDirectory</MudText>
            </MudStack>
            <MudDivider />
            <MudStack Row="true" Class="setting-item">
                <MudStack Spacing="0">
                    <MudText Typo="Typo.body1"><b>Zarządzaj</b></MudText>
                    <MudSpacer/>
                    <MudText Typo="Typo.body2">Twórz i przywracaj kopie zapasowe</MudText>
                </MudStack>
                <MudSpacer />
                <MudStack Row="true" Class="setting-data setting-data-fixed">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateBackup">Stwórz kopię</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ApplyBackup">Przywróć dane</MudButton>
                </MudStack>
            </MudStack>
        </MudStack>
    </MudCardContent>
</MudCard>


@* <h5 class="card-title">Kopia zapasowa</h5>
<div class="list-group shadow">
    <div class="list-group-item row">
        <div class="col">
            <div class="fw-bold">Ostatni zapis<span class="badge rounded-pill text-bg-secondary ms-2">Co @_backupPeriodString</span></div>
            <div class="text-muted">Data i godzina ostatniej automatycznej kopii zapasowej</div>
        </div>
        <div class="col-auto my-auto">
            <input class="form-control" value="@_lastBackupDateTimeString" disabled />
        </div>
    </div>
    <div class="list-group-item row">
        <div class="col">
            <div class="fw-bold">Lokalizacja</div>
            <div class="text-muted">Miejsce zapisu danych</div>
        </div>
        <div class="col-auto my-auto">
            <input class="form-control" value="@FileSystem.Current.AppDataDirectory" disabled />
        </div>
    </div>
    <div class="list-group-item row">
        <div class="col">
            <div class="fw-bold">Zarządzaj</div>
            <div class="text-muted">Twórz i przywracaj kopie zapasowe</div>
        </div>
        <div class="col-auto my-auto">
            <button class="btn btn-primary me-2" @onclick="@CreateBackup">Stwórz kopię</button>
            <button class="btn btn-primary" @onclick="ApplyBackup">Przywróć dane</button>
        </div>
    </div>
</div>
 *@
@code {
    private string _lastBackupDateTimeString = string.Empty;
    private string _backupPeriodString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _lastBackupDateTimeString = (await BackupService.GetLastBackupTimeAsync())?.ToString("g") ?? "Wyłączono";

        TimeSpan? backupPeriod = BackupService.GetBackupPeriod();
        _backupPeriodString = backupPeriod.HasValue ? backupPeriod.Value.ToHumanReadableString() : "N/A";
    }

    private async Task CreateBackup()
    {
        BackupResult result = await BackupService.MakeBackupAsync();
        if (result.IsSuccessful)
            Snackbar.Add("Pomyślnie utworzono kopię zapasową");
        else
            Snackbar.Add(result.Message, Severity.Error);
    }

    private async Task ApplyBackup()
    {
        BackupResult result = await BackupService.LoadBackupFromFileAsyc();
        if (result.IsSuccessful)
            Snackbar.Add("Pomyślnie przywrócono kopię zapasową");
        else
            Snackbar.Add(result.Message, Severity.Error);
    }
}