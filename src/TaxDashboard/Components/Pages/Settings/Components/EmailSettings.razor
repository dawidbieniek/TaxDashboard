@using TaxDashboard.Components.Loading
@using TaxDashboard.Components.Popups
@using TaxDashboard.Services.Emails
@using TaxDashboard.Util

@inject EmailService EmailService

<MudCard Elevation="3">
    <MudCardHeader>
        <MudText Typo="Typo.h6">Przypomnienia</MudText>
    </MudCardHeader>
    <MudCardContent>
        <LoadingContentsComponent Initialized="@(_emailLoginInfo is not null)">
            <MudStack Spacing="2">
                <MudStack Row="true" Class="setting-item">
                    <MudStack Spacing="0">
                        <MudStack Row="true">
                            <MudText Typo="Typo.body1"><b>Konto</b></MudText>
                            @{
                                string chipMessage = _emailLoginInfo!.LoggedIn ? $"Zalogowano - {_emailLoginInfo.LoginOption.GetDescriptor()}" : "Wylogowano";
                                Color chipColor = _emailLoginInfo!.LoggedIn ? Color.Primary : Color.Warning;
                            }
                            <MudChip T="string" Size="Size.Small" Color="@chipColor" Class="ma-0">@chipMessage</MudChip>
                        </MudStack>
                        <MudText Typo="Typo.body2">Konto gmail używane przy wysyłaniu wiadomości</MudText>
                    </MudStack>
                    <MudSpacer />
                    @if (_emailLoginInfo!.LoggedIn)
                    {
                        <MudStack Row="true" Class="setting-data">
                            <MudText Typo="Typo.body2">@_emailLoginInfo.EmailAddress</MudText>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LogoutEmailAsync">Wyloguj</MudButton>
                        </MudStack>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="setting-data" Href="/email/login">Logowanie</MudButton>
                    }
                </MudStack>
                <MudDivider />
                <MudStack Row="true" Class="setting-item">
                    <MudStack Spacing="0">
                        <MudText Typo="Typo.body1"><b>Imię</b></MudText>
                        <MudText Typo="Typo.body2">Nazwa używana przy wysyłaniu wiadomości</MudText>
                    </MudStack>
                    <MudSpacer />
                    <MudTextField T="string" Typo="Typo.body2" Class="setting-data setting-data-fixed flex-grow-0" Label="Imię"
                                  @bind-Value="EmailName" @bind-Value:after="@(() => Preferences.Set(GlobalSettings.PreferencesStorage.EmailNameKey, EmailName))"
                                  Disabled="@(!_emailLoginInfo!.LoggedIn)" />
                </MudStack>
                <MudDivider />
                <MudStack Spacing="1">
                    <MudStack Row="true" Class="setting-item">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.body1"><b>Szablon</b></MudText>
                            <MudText Typo="Typo.body2">Treść szablonu używana przy wysyłaniu wiadomości</MudText>
                        </MudStack>
                        <MudSpacer />
                        <MudStack Row="true" Class="setting-data">
                            <TokenListIcon />
                            <MudSelect Label="Szablon" Style="width:320px"
                                       @bind-Value="_selectedTemplateType" @bind-Value:after="ChangeSelectedTemplateType"
                                       Disabled="@_editingEmailTemplate">
                                @foreach (var template in Enum.GetValues<EmailTemplateType>())
                                {
                                    <MudSelectItem Value="@template">@template.GetDescriptor()</MudSelectItem>
                                }
                            </MudSelect>
                            @{
                                string buttonText = _editingEmailTemplate ? "Zapisz" : "Edytuj";
                                Color buttonColor = _editingEmailTemplate ? Color.Secondary : Color.Primary;
                            }
                            <MudButton Variant="Variant.Filled" Color="@buttonColor" OnClick="ChangeEditState">@buttonText</MudButton>
                        </MudStack>
                    </MudStack>
                    <MudTextField T="string" Typo="Typo.body1" Variant="Variant.Outlined" @bind-Value="_emailSubjectTemplate" Adornment="Adornment.Start" AdornmentText="Temat"
                                  ReadOnly="@(!_editingEmailTemplate)" Disabled="@(!_editingEmailTemplate)" />
                    <MudTextField T="string" Typo="Typo.body1" Variant="Variant.Outlined" @bind-Value="_emailTemplate" Lines="8"
                                  ReadOnly="@(!_editingEmailTemplate)" Disabled="@(!_editingEmailTemplate)" />
                </MudStack>
            </MudStack>
        </LoadingContentsComponent>
    </MudCardContent>
</MudCard>
<TaxDashboard.Components.Dialogs.UnsavedContextChecker NavigationBlockCondition="() => _editingEmailTemplate" />

@code {
    private bool _editingEmailTemplate = false;
    private EmailTemplateType _selectedTemplateType = EmailTemplateType.AmountFiscal;
    private string _emailSubjectTemplate { get; set; } = string.Empty;
    private string _emailTemplate { get; set; } = string.Empty;

    private string EmailName { get; set; } = string.Empty;

    private EmailLoginInfo? _emailLoginInfo;

    [Parameter]
    public EventCallback<bool> OnTempateEditChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ChangeSelectedTemplateType();
        EmailName = Preferences.Get(GlobalSettings.PreferencesStorage.EmailNameKey, string.Empty);

        await UpdateLoginDataAsync();
    }

    private void ChangeEditState()
    {
        if (_editingEmailTemplate)
            EmailTemplatesService.SetTemplate(_selectedTemplateType, _emailSubjectTemplate, _emailTemplate);

        _editingEmailTemplate = !_editingEmailTemplate;
        OnTempateEditChanged.InvokeAsync(_editingEmailTemplate);
    }

    private void ChangeSelectedTemplateType() => (_emailSubjectTemplate, _emailTemplate) = EmailTemplatesService.GetTemplate(_selectedTemplateType);

    private async Task LogoutEmailAsync()
    {
        await EmailService.ClearAllLoginDataAsync();
        await UpdateLoginDataAsync();
    }

    private async Task UpdateLoginDataAsync()
    {
        _emailLoginInfo = await EmailService.GetCurrentLoginInfoAsync();
        StateHasChanged();
    }
}