@page "/list"

@using BlazorTable
@using TaxDashboard.Components.Pages.ClientList.Components
@using TaxDashboard.Components.Popups
@using TaxDashboard.Util

@inject ClientsService ClientsService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="client-table container-fluid flex-row pt-3">
    <Table TableItem="Client" Items="@_allClients" PageSize="15" TableClass="table table-striped table-hover table-bordered table-sm small w-100 rounded" TableRowClass="@((c) => c.Suspended ? "suspended" : "")" OnNewPageRendered="@(() => EnableVisibleTooltipsAsync())">
        <Pager ShowPageNumber="true" ShowTotalCount="true" />
        <Column TableItem="Client" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="true" DefaultSortColumn="true" Width="10%" />
        <Column TableItem="Client" Title="Imię" Field="@(x => x.FullName)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="" Width="10%">
            <Template>
                <NotificationsPanel Client="@context"/>
            </Template>
        </Column>
        <Column TableItem="Client" Title="NIP" Field="@(x => x.NIP)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="Email" Field="@(x => x.Email)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <a href="/email/new?clientId=@(context.Id)">@context.Email</a>
            </Template>
        </Column>
        <Column TableItem="Client" Title="Telefon" Field="@(x => x.PhoneNumber)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="Zawieszony" Field="@(x => x.Suspended)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <InputCheckbox class="form-check-input m-1" @bind-Value="@context.Suspended" @bind-Value:after="@(() => ClientsService.UpdateAsync(context))" />
            </Template>
        </Column>
        <Column TableItem="Client" Title="Bank" Field="@(x => x.Bank.Name)" Sortable="true" Filterable="true" />
        <Column TableItem="Client" Title="Data założenia" Field="@(x => x.JoinDateTime)" Format="yyyy-MM-dd" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="Kasa fiskalna" Field="@(x => x.UseCashRegister)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <input class="form-check-input m-1" type="checkbox" disabled checked="@context.UseCashRegister" />
            </Template>
        </Column>
        <Column TableItem="Client" Title="Umowa o pracę" Field="@(x => x.EmploymentContract)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <input class="form-check-input m-1" type="checkbox" disabled checked="@context.EmploymentContract" />
            </Template>
        </Column>
        <Column TableItem="Client" Title="VAT" Field="@(x => x.VAT)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <input class="form-check-input m-1" type="checkbox" disabled checked="@context.VAT" />
            </Template>
        </Column>
        <Column TableItem="Client" Title="Metoda kasowa" Field="@(x => x.CashMethod)" Sortable="true" Filterable="true" Width="10%">
            <Template>
                <input class="form-check-input m-1" type="checkbox" disabled checked="@context.CashMethod" />
            </Template>
        </Column>
        <Column TableItem="Client" Title="Abonament" Field="@(x => x.Subscription)" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="Koszt abonamentu" Field="@(x => x.SubscriptionPrice)" Format="C2" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="Kwota autoryzacyjna" Field="@(x => x.AuthorizationPrice)" Format="C2" Sortable="true" Filterable="true" Width="10%" />
        <Column TableItem="Client" Title="Podatek" Field="@(x => x.TaxType)" Sortable="true" Filterable="true" Width="10%">
            <Template>@(context.TaxType.GetDescriptor())</Template>
        </Column>
        <Column TableItem="Client" Title="Ulga" Field="@(x => x.ReductionType)" Sortable="true" Filterable="true" Width="10%">
            <Template>@(context.ReductionType.GetDescriptor())</Template>
        </Column>
        <Column TableItem="Client" Title="Rozliczanie PIT" Field="@(x => x.PITPaymentType)" Sortable="true" Filterable="true" Width="10%">
            <Template>@(context.PITPaymentType.GetDescriptor())</Template>
        </Column>
        <Column TableItem="Client" Title="Opłacanie VAT" Field="@(x => x.VATPaymentType)" Sortable="true" Filterable="true" Width="10%">
            <Template>@(context.VATPaymentType.GetDescriptor())</Template>
        </Column>
        <Column TableItem="Client" Title="" Width="5%">
            <Template><button class="btn btn-danger" @onclick="@(async () => await ShowDeleteModalAsync(context))"><div class="bi-trash3" style="margin-top:-1px;" /></button></Template>
        </Column>
    </Table>
</div>
<!-- Modal -->
<Modal @ref="_deleteClientModalRef"  Title="Usuwanie klienta" ButtonText="Usuń" ButtonClick="@DeleteModalClientAsync" BlockNavigationWhenShowing="true">
    Czy na pewno chcesz usunąć <i class="text-danger">@(_deletedModalClient?.FullName ?? "(brak imienia)")</i>?
</Modal>

@code
{
    private List<Client> _allClients = [];
    private Client? _deletedModalClient;

    private Modal _deleteClientModalRef = default!;

    protected override async Task OnInitializedAsync()
    {
        _allClients = [.. await ClientsService.GetAllWithDetailsAsync()];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await EnableVisibleTooltipsAsync();
    }

    private ValueTask EnableVisibleTooltipsAsync() => JS.InvokeVoidAsync("enableTooltips");

    private async Task ShowDeleteModalAsync(Client client)
    {
        _deletedModalClient = client;
        await _deleteClientModalRef.ShowAsync();
    }

    private async Task DeleteModalClientAsync()
    {
        if (_deletedModalClient is not null)
        {
            await ClientsService.DeleteAsync(_deletedModalClient.Id);
            _allClients.Remove(_deletedModalClient);
        }

        await JS.InvokeVoidAsync("hideModal", "modal");
    }
}