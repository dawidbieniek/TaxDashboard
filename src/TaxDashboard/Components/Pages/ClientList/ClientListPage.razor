@page "/list"

@using BlazorTable
@using TaxDashboard.Components.Pages.ClientList.Components
@using TaxDashboard.Components.Popups
@using TaxDashboard.Util

@inject ClientsService ClientsService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="pa-2">
    <MudDataGrid T="Client" Items="_allClients" SortMode="SortMode.Single" Filterable="true" Dense="true" QuickFilter="@_quickFilter" RowContextMenuClick="OpenMenuContent" RowClassFunc="@((c, _) => c.Suspended ? "suspended" : "")">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Wszyscy klienci</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="@_searchString" Placeholder="Wyszukaj" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" />
        </ToolBarContent>
        <Columns>
            <HierarchyColumn />
            <PropertyColumn Property="x => x.Id" Title="Id" Sortable="true" Filterable="false" />
            <PropertyColumn Property="x => x.FullName" Title="Imię" Sortable="true" Filterable="true" />
            <TemplateColumn>
                <CellTemplate>
                    <NotificationsPanel Client="@context.Item" />
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Płeć" Sortable="true" Filterable="true">
                <CellTemplate>
                    <MudText Typo="Typo.body2">@(context.Item.Gender == Data.Enums.Gender.Male ? "M" : "K")</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.NIP" Title="NIP" Sortable="true" Filterable="true" />
            <TemplateColumn Title="Bank" Sortable="true" Filterable="true">
                <CellTemplate>
                    <MudText Typo="Typo.body2">@context.Item.Bank.Name</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Email" Title="Email" Sortable="true" Filterable="true" />
            <PropertyColumn Property="x => x.PhoneNumber" Title="Telefon" Sortable="true" Filterable="true" />
        </Columns>
        <ChildRowContent>
            <ClientDetailsCard Client="@context.Item" />
        </ChildRowContent>
        <PagerContent>
            @* RowsPerPageString="Ilość na stronę" InfoFormat="{first_item} - {last_item} / {all_items}" *@
            <MudDataGridPager PageSizeOptions="[10, 15, 20, 30]" />
        </PagerContent>
    </MudDataGrid>
    <MudMenu @ref="_contextMenuRef" PositionAtCursor="true">
        @if (_menuContextClient is not null)
        {
            if (_menuContextClient.Suspended)
            {
                <MudMenuItem Icon="@Icons.Material.Filled.LockOpen" IconColor="Color.Success" OnClick="() => SuspendClient(_menuContextClient, false)">
                    <MudText Typo="Typo.body1" Color="Color.Success">Odwieś @_menuContextClient.FullName</MudText>
                </MudMenuItem>
            }
            else
            {
                <MudMenuItem Icon="@Icons.Material.Filled.Block" IconColor="Color.Warning" OnClick="() => SuspendClient(_menuContextClient)" >
                    <MudText Typo="Typo.body1" Color="Color.Warning">Zawieś @_menuContextClient.FullName</MudText>
                </MudMenuItem>
            }
            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="@(() => ShowDeleteModalAsync(_menuContextClient))">
                <MudText Typo="Typo.body1" Color="Color.Error">Usuń @_menuContextClient.FullName</MudText>
            </MudMenuItem>
        }
    </MudMenu>
</div>
<!-- Modal -->
<Modal @ref="_deleteClientModalRef" Title="Usuwanie klienta" ButtonText="Usuń" ButtonClick="@DeleteModalClientAsync" BlockNavigationWhenShowing="true">
    Czy na pewno chcesz usunąć <i class="text-danger">@(_deletedModalClient?.FullName ?? "(brak imienia)")</i>?
</Modal>

@code
{
    private List<Client> _allClients = [];
    private Client? _deletedModalClient;

    private string _searchString = string.Empty;
    private Func<Client, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private MudMenu _contextMenuRef = default!;
    private Client? _menuContextClient;

    private Modal _deleteClientModalRef = default!;

    protected override async Task OnInitializedAsync()
    {
        _allClients = [.. await ClientsService.GetAllWithDetailsAsync()];
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await EnableVisibleTooltipsAsync();
    }

    private async Task OpenMenuContent(DataGridRowClickEventArgs<Client> args)
    {
        _menuContextClient = args.Item;
        await _contextMenuRef.OpenMenuAsync(args.MouseEventArgs);
    }
    private async Task SuspendClient(Client client, bool suspend = true)
    {
        client.Suspended = suspend;
        await ClientsService.UpdateAsync(client);
    }

    private ValueTask EnableVisibleTooltipsAsync() => JS.InvokeVoidAsync("enableTooltips");

    private async Task ShowDeleteModalAsync(Client client)
    {
        _deletedModalClient = client;
        await _deleteClientModalRef.ShowAsync();
    }

    private async Task DeleteModalClientAsync()
    {
        if (_deletedModalClient is not null)
        {
            await ClientsService.DeleteAsync(_deletedModalClient.Id);
            _allClients.Remove(_deletedModalClient);
        }

        await JS.InvokeVoidAsync("hideModal", "modal");
    }
}