@page "/email/new"

@using System.ComponentModel.DataAnnotations
@using TaxDashboard.Components.Loading
@using TaxDashboard.Components.Popups

@inject NavigationManager Navigation
@inject EmailService EmailService
@inject ClientsService ClientsService
@inject ISnackbar Snackbar

<LoadingContentsComponent Initialized="@(_emailLoginInfo is not null)">

    <div class="py-3">
        <MudContainer MaxWidth="MaxWidth.Large">
            <EditForm EditContext="@_emailEditContext" OnValidSubmit="SendEmailAsync">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardContent>
                        <MudStack>
                            <MudStack Row>
                                <MudText Typo="Typo.body1" Class="label-col">Od</MudText>
                                <MudText Typo="Typo.body1" Class="data-col">@_email.From</MudText>
                                <MudText Typo="Typo.body1" Class="data-col">@_email.FromName</MudText>
                            </MudStack>
                            <MudStack Row>
                                <MudText Typo="Typo.body1" Class="label-col">Do</MudText>
                                <MudTextField Typo="Typo.body1" Class="data-col" @bind-Value="@_email.To" For="() => _email.To" Required />
                                <MudText Typo="Typo.body1" Class="data-col">@_email.ToName</MudText>
                            </MudStack>
                            <MudTextField T="string" Typo="Typo.body1" Variant="Variant.Outlined" @bind-Value="_email.Subject" For="() => _email.Subject"
                                          Adornment="Adornment.Start" AdornmentText="Temat" />
                            <MudTextField T="string" Typo="Typo.body1" Variant="Variant.Outlined" @bind-Value="_email.Content" For="() => _email.Content"
                                          AutoGrow Lines="8" />
                            <MudStack Row>
                                <MudSpacer />
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Wyślij</MudButton>
                            </MudStack>
                        </MudStack>
                    </MudCardContent>
                </MudCard>
            </EditForm>
        </MudContainer>
    </div>
</LoadingContentsComponent>

@code {
    private EmailContent _email = new();
    private EditContext _emailEditContext = default!;

    private EmailLoginInfo? _emailLoginInfo;

    [SupplyParameterFromQuery]
    public int? ClientId { get; set; }
    [SupplyParameterFromQuery]
    public int? TemplateType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _emailEditContext = new(_email);

        await UpdateLoginDataAsync();
    }

    private async Task SendEmailAsync()
    {
        bool emailSent = await EmailService.SendEmailAsync(_email.To, _email.ToName, _email.FromName, _email.Subject, _email.Content);
        Snackbar.Add(emailSent ? "Pomyślnie wysłano wiadomość" : "Nie udało się wysłać wiadomości", emailSent ? Severity.Normal : Severity.Error);
    }


    private async Task UpdateLoginDataAsync()
    {
        _emailLoginInfo = await EmailService.GetCurrentLoginInfoAsync();
        if (!_emailLoginInfo.LoggedIn)
        {
            Navigation.NavigateTo("/email/login");
            return;
        }

        if (ClientId is null)
            return;

        Client? client = await ClientsService.GetDetailsAsync(ClientId.Value);
        if (client is null)
            return;

        if (TemplateType.HasValue)
        {
            var templateType = (Services.Emails.EmailTemplateType)TemplateType.Value;

            (_email.Subject, string template) = EmailTemplatesService.GetTemplate(templateType);
            _email.Content = EmailTemplatesService.ReplaceTokensInMessage(template, client);

            Snackbar.Add($"Użyto szablonu dla {templateType.GetDescriptor()}");
        }

        _email.From = _emailLoginInfo.EmailAddress!;
        _email.FromName = Preferences.Get(GlobalSettings.PreferencesStorage.EmailNameKey, string.Empty);
        _email.To = client.Email;
        _email.ToName = client.FullName;

        StateHasChanged();
    }

    private class EmailContent
    {
        [Required(ErrorMessage = "Podaj adres nadawcy")]
        public string From { get; set; } = string.Empty;
        public string FromName { get; set; } = string.Empty;
        [Required(ErrorMessage = "Podaj adresata")]
        public string To { get; set; } = string.Empty;
        public string ToName { get; set; } = string.Empty;
        [Required(ErrorMessage = "Temat nie może być pusty")]
        [MinLength(1, ErrorMessage = "Temat nie może być pusty")]
        public string Subject { get; set; } = string.Empty;
        [Required(ErrorMessage = "Zawartość nie może być pusta")]
        [MinLength(1, ErrorMessage = "Zawartość nie może być pusta")]
        [MaxLength(2024, ErrorMessage = "Zbyt długa wiadomość (max 2048)")]
        public string Content { get; set; } = string.Empty;
    }
}