@using TaxDashboard.Services.Notifications

@implements IAsyncDisposable

@inject IJSRuntime JS

@if (ShowWhenEmptyMessage || !string.IsNullOrEmpty(PopoverText))
{
    <MudIconButton id="@_id" Icon="@Icons.Material.Filled.NotificationImportant" Color="Severity.Color()" Size="Size" OnClick="() => _openPopover = !_openPopover" />
    <MudOverlay @bind-Visible="_openPopover" AutoClose="true" />
    <MudPopover Class="pa-2" Style="width:16rem" Open="_openPopover" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
        @((MarkupString)PopoverText)
    </MudPopover>
}

@code {
    private string _id = Guid.NewGuid().ToString();
    private bool _openPopover = false;

    private ChangeTracker<string> _popoverTextChangeTracker = new();

    [Parameter]
    public bool ShowWhenEmptyMessage { get; set; } = false;
    [Parameter]
    public NotificationSeverity Severity { get; set; } = NotificationSeverity.None;
    [Parameter]
    public string PopoverText { get; set; } = string.Empty;
    [Parameter]
    public string PopoverLocation { get; set; } = "bottom";
    [Parameter]
    public Size Size { get; set; } = Size.Medium;

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeVoidAsync("hidePopover", _id);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_popoverTextChangeTracker.HasChanged(PopoverText))
        {
            // Refresh popover by hiding it and then showing new one
            await JS.InvokeVoidAsync("hidePopover", _id);
            await JS.InvokeVoidAsync("enablePopover", _id);
        }
    }
}
