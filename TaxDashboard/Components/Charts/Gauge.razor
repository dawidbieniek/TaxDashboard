@using ApexCharts

<div class="d-flex flex-column align-items-center justify-content-center h-100">
    <ElementRequiringLoad @ref="@_loadingRef">
        <ApexChart @ref="@_chartRef" TItem="GaugeValue" OnBeforeMount="@(() => _loadingRef.HideLoadingIcon())">
            <ApexPointSeries TItem="GaugeValue"
                             SeriesType=SeriesType.RadialBar
                             Items=@([new GaugeValue {Percentage = Value / ValueLimit * 100, Label = Label}])
                             Name="@Label"
                             XValue="@(e => e.Label)"
                             YValue="@(e => e.Percentage)" />
        </ApexChart>
        <div class="h5 w-100 text-center@(_valueClass)">@Value.ToString("C2", GlobalSettings.CurrencyCulture)</div>
    </ElementRequiringLoad>
</div>

@code {
    private const decimal WarningColorPercentage = 0.8M;

    private string _valueClass = string.Empty;

    private ApexChart<GaugeValue> _chartRef = default!;
    private ElementRequiringLoad _loadingRef = default!;

    [Parameter]
    public string Label { get; set; } = string.Empty;
    [Parameter]
    public decimal Value { get; set; }
    [Parameter]
    public decimal ValueLimit { get; set; } = 10;

    protected override void OnParametersSet()
    {
        if (Value >= ValueLimit * WarningColorPercentage)
        {
            if (Value >= ValueLimit)
                _valueClass = " text-danger";
            else
                _valueClass = " text-warning";
        }
        else
            _valueClass = string.Empty;
    }

    public Task UpdateChartAsync() => _chartRef.UpdateSeriesAsync();
}
