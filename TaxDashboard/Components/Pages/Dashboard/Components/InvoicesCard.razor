<h5 class="card-title mb-2">Faktury</h5>
<div class="d-flex gap-2 mb-3">
    <div class="col mb-2">
        <label class="form-label" for="sell">Sprzedażowe</label>
        <InputNumber id="sell" class="form-control" @bind-Value="@CurrentSellInvoiceAmount" onclick="this.select();" />
    </div>
    <div class="col mb-2">
        <label class="form-label" for="cost">Kosztowe</label>
        <InputNumber id="cost" class="form-control" @bind-Value="@CurrentCostInvoiceAmount" onclick="this.select();" />
    </div>
</div>
<div class="col">
    @{
        Settlement? currentSettlement = CurrentSettlement;
        <input type="checkbox" class="btn-check visually-hidden" id="settlement" checked="@(currentSettlement is not null)" @onchange="@ChangeSettlement">
        <label class="btn btn-outline-secondary toggle-button" for="settlement"><b>@(currentSettlement is not null ? "Rozliczony" : "Nierozliczony")</b></label>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public Client Client { get; set; } = default!;
    [Parameter, EditorRequired]
    public DateOnly? ContextDate { get; set; }
    [Parameter]
    public ClientsService? ClientsService { get; set; }
    [Parameter]
    public EventCallback OnSettlementStateChanged { get; set; }


    private Settlement? CurrentSettlement => ContextDate is null ? null : Client.Settlements.FirstOrDefault(s => s.ContextDate == ContextDate.Value);
    private InvoiceCount? CurrentSellInvoice => ContextDate is null ? null : Client.Invoices.FirstOrDefault(i => i.Type == Models.Enums.InvoiceType.Sell && i.Date == ContextDate.Value);
    private InvoiceCount? CurrentCostInvoice => ContextDate is null ? null : Client.Invoices.FirstOrDefault(i => i.Type == Models.Enums.InvoiceType.Cost && i.Date == ContextDate.Value);

    private int CurrentSellInvoiceAmount
    {
        get => CurrentSellInvoice?.Amount ?? 0;
        set => _ = ChangeSellInvoice(value);
    }
    private int CurrentCostInvoiceAmount
    {
        get => CurrentCostInvoice?.Amount ?? 0;
        set => _ = ChangeCostInvoice(value);
    }

    private async Task UpdateClient()
    {
        if (ClientsService is null)
            return;

        await ClientsService.UpdateAsync(Client);
    }

    private async Task ChangeSettlement(ChangeEventArgs e)
    {
        Settlement? currentSettlement = CurrentSettlement;

        if ((bool)e.Value!)
        {
            Client.Settlements.Add(new()
                {
                    ContextDate = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                    Client = Client
                });
        }
        else if (currentSettlement is not null)
            Client.Settlements.Remove(currentSettlement);

        await UpdateClient();
        await OnSettlementStateChanged.InvokeAsync();
    }

    private async Task ChangeSellInvoice(int invoiceAmount)
    {
        InvoiceCount? currentInvoice = CurrentSellInvoice;

        if(invoiceAmount == 0)
        {
            if(currentInvoice is not null)
                Client.Invoices.Remove(currentInvoice);
        }
        else
        {
            if (currentInvoice is not null)
                currentInvoice.Amount = invoiceAmount;
            else
            {
                Client.Invoices.Add(new()
                {
                    Type = Models.Enums.InvoiceType.Sell,
                    Amount = invoiceAmount, 
                    Date = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                    Client = Client,
                });
            }
        }

        await UpdateClient();
    }

    private async Task ChangeCostInvoice(int invoiceAmount)
    {
        InvoiceCount? currentInvoice = CurrentCostInvoice;

        if (invoiceAmount == 0)
        {
            if (currentInvoice is not null)
                Client.Invoices.Remove(currentInvoice);
        }
        else
        {
            if (currentInvoice is not null)
                currentInvoice.Amount = invoiceAmount;
            else
            {
                Client.Invoices.Add(new()
                    {
                        Type = Models.Enums.InvoiceType.Cost,
                        Amount = invoiceAmount,
                        Date = ContextDate ?? new(DateTime.Today.Year, DateTime.Today.Month, 1),
                        Client = Client,
                    });
            }
        }

        await UpdateClient();
    }
}
