@page "/data"

@using System.Globalization
@using TaxDashboard.Components.Navbar
@using TaxDashboard.Components.FormInputs
@using TaxDashboard.Models.Enums
@using TaxDashboard.Util

@inherits DashboardPageBase
@implements IDisposable

@inject BanksService BanksService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<DashboardPageComponent Initialized="@Initialized">
    <ClientSelector ShowDateSelector="false" StartingClient="@Client" OnSelectedClientChanged="ChangeSelectedClient" />

    @if (Client is null)
    {
        <div class="alert alert-warning text-center m-3">
            <div class="mb-3">Wybierz klienta z listy, albo dodaj nowego</div>
            <a class="btn btn-primary ms-auto" href="/add">Dodaj klienta</a>
        </div>
    }
    else
    {
        <EditForm EditContext="_clientEditContext" class="container-fluid flex-row mt-2" OnValidSubmit="UpdateClientAsync">
            <DataAnnotationsValidator />
            <div class="row mb-2">
                <div class="col-12 d-flex flex-row">
                    <div class="flex-grow-1"> </div>
                    <button class="btn btn-primary@(_clientEditContext.IsModified() && !_clientEditContext.GetValidationMessages().Any() ? "" : " disabled")" style="width:6rem;" type="submit">Zapisz</button>
                </div>
            </div>
            <div class="row">
                <div class="col-12 col-lg-6 col-xl-4">
                    @* General *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Dane</h5>
                            <p class="text-body-secondary mb-2">Ogólne informacje o kliencie</p>
                            <div class="d-flex gap-2">
                                <div class="col mb-2">
                                    <label class="form-label" for="name">Imię</label>
                                    <InputText id="name" class="form-control" @bind-Value="Client.Name" onclick="this.select();" />
                                    <ValidationMessage For="@(()=> Client.Name)" />
                                </div>
                                <div class="col mb-2">
                                    <label class="form-label" for="surname">Nazwisko</label>
                                    <InputText id="surname" class="form-control" @bind-Value="Client.Surname" onclick="this.select();" />
                                    <ValidationMessage For="@(()=> Client.Surname)" />
                                </div>
                            </div>
                            <div class="d-flex gap-2">
                                <div class="col mb-2">
                                    <label class="form-label" for="phone">Telefon</label>
                                    <InputText id="phone" class="form-control" type="tel" @bind-Value="Client.PhoneNumber" onclick="this.select();" />
                                    <ValidationMessage For="@(()=> Client.PhoneNumber)" />
                                </div>
                                <div class="col mb-2">
                                    <label class="form-label" for="email">Email</label>
                                    <InputText id="email" class="form-control" type="email" @bind-Value="Client.Email" onclick="this.select();" />
                                    <ValidationMessage For="@(()=> Client.Email)" />
                                </div>
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="date">Data założenia</label>
                                <InputDate id="date" class="form-control" @bind-Value="Client.JoinDateTime" />
                                <ValidationMessage For="@(()=> Client.JoinDateTime)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="nip">NIP</label>
                                <InputText id="nip" class="form-control" @bind-Value="Client.NIP" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.NIP)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="bank">Bank</label>
                                <InputClassSelect id="bank" class="form-select" @bind-Value="@Client.Bank" Options="@_allBanks" Selector="v => v.Name" />
                                <ValidationMessage For="@(()=> Client.Bank)" />
                            </div>
                        </div>
                    </div>
                    @* IDK 2 *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">??</h5>
                            <p class="text-body-secondary mb-2">???</p>
                            <div class="col mb-2 form-check form-switch">
                                <label class="form-check-label" for="employmentContract">Umowa o pracę</label>
                                <InputCheckbox id="employmentContract" class="form-check-input" type="checkbox" @bind-Value="Client.EmploymentContract" />
                            </div>
                            <div class="col mb-2 form-check form-switch">
                                <label class="form-check-label" for="cashMethod">Metoda kasowa</label>
                                <InputCheckbox id="cashMethod" class="form-check-input" type="checkbox" @bind-Value="Client.CashMethod" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-6 col-xl-4">
                    @* Subscription *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Abonament</h5>
                            <p class="text-body-secondary mb-2">Dane abonamentu klienta</p>
                            <div class="col mb-2">
                                <label class="form-label" for="subscription">Typ abonamentu</label>
                                <InputText id="subscription" class="form-control" @bind-Value="Client.Subscription" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.Subscription)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="authCost">Kwota autoryzacyjna</label>
                                <InputText id="authCost" class="form-control" @bind-Value="AuthorizationPrice" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.AuthorizationPrice)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="subCost">Koszt abonamentu</label>
                                <InputText id="subCost" class="form-control" @bind-Value="SubscriptionPrice" onclick="this.select();" />
                                <ValidationMessage For="@(()=> Client.SubscriptionPrice)" />
                            </div>
                        </div>
                    </div>
                    @* VAT *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">VAT</h5>
                            <p class="text-body-secondary mb-2">Dane VAT klienta</p>
                            <div class="col mb-2 form-check form-switch">
                                <label class="form-check-label" for="vat">Rozlicza VAT</label>
                                <InputCheckbox id="vat" class="form-check-input" type="checkbox" @bind-Value="Client.VAT" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="vatType">Sposób opłacania VAT</label>
                                @if (Client.VAT)
                                {
                                    <InputClassSelect id="vatType" class="form-select" @bind-Value="@Client.VATPaymentType" Options="@(Enum.GetValues<PaymentType>())" Selector="v => v.GetDescriptor()" />
                                }
                                else
                                {
                                    <InputClassSelect disabled id="vatType" class="form-select" @bind-Value="@Client.VATPaymentType" Options="@(Enum.GetValues<PaymentType>())" Selector="v => v.GetDescriptor()" />
                                }
                                <ValidationMessage For="@(()=> Client.VATPaymentType)" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-6 col-xl-4">
                    @* IDK 1 *@
                    <div class="card bg-light mb-4">
                        <div class="card-body">
                            <h5 class="card-title">??</h5>
                            <p class="text-body-secondary mb-2">???</p>
                            <div class="col mb-2">
                                <label class="form-label" for="taxType">Podatek</label>
                                <InputClassSelect id="taxType" class="form-select" @bind-Value="@Client.TaxType" Options="@(Enum.GetValues<TaxType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.TaxType)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="reductionType">Ulga</label>
                                <InputClassSelect id="reductionType" class="form-select" @bind-Value="@Client.ReductionType" Options="@(Enum.GetValues<ReductionType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.ReductionType)" />
                            </div>
                            <div class="col mb-2">
                                <label class="form-label" for="pit">Sposób rozliczania PIT</label>
                                <InputClassSelect id="pit" class="form-select" @bind-Value="@Client.PITPaymentType" Options="@(Enum.GetValues<PaymentType>())" Selector="v => v.GetDescriptor()" />
                                <ValidationMessage For="@(()=> Client.PITPaymentType)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
</DashboardPageComponent>
<!-- Modal -->
<div class="modal" id="unsavedChangesModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5">Niezapisane zmiany</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                W formularzu znajdują się niezapisane zmiany. Przejście na inną stronę spowoduje ich utratę.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                <button type="button" class="btn btn-danger" @onclick="@ForceNavigation">Odrzuć zmiany</button>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<Bank> _allBanks = [];
    private EditContext _clientEditContext = default!;

    private IDisposable? _navigationLockRegistration;
    private string? _lastNavigationTarget;
    private bool _ignoreChanges = false;
    private bool _modalShowing = false;

    protected override Client? Client
    {
        get => base.Client;
        set
        {
            if (value == base.Client)
                return;

            base.Client = value;

            if (value is not null)
                _clientEditContext = new(value!);
        }
    }

    private string AuthorizationPrice
    {
        get => Client!.AuthorizationPrice.ToString("C2");
        set
        {
            if (Decimal.TryParse(value, GlobalSettings.CurrencyNumberStyles, GlobalSettings.CurrencyCulture, out decimal currency))
                Client!.AuthorizationPrice = Math.Round(currency, 2);
        }
    }

    private string SubscriptionPrice
    {
        get => Client!.SubscriptionPrice.ToString("C2");
        set
        {
            if (Decimal.TryParse(value, GlobalSettings.CurrencyNumberStyles, GlobalSettings.CurrencyCulture, out decimal currency))
                Client!.SubscriptionPrice = Math.Round(currency, 2);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allBanks = await BanksService.GetAllAsync();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _navigationLockRegistration = Navigation.RegisterLocationChangingHandler(OnLocationChanging);
            await JS.InvokeVoidAsync("addModalHiddenListener", DotNetObjectReference.Create(this), "OnModalHidden", "unsavedChangesModal");
        }
    }

    private async Task UpdateClientAsync()
    {
        if (Client is not null && _clientEditContext.IsModified())
        {
            _clientEditContext = new(Client);
            await ClientsService.UpdateAsync(Client);
        }
    }

    [JSInvokable]
    public void OnModalHidden() => _modalShowing = false;

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (context.TargetLocation == Navigation.ToAbsoluteUri("data").AbsoluteUri)
            return ValueTask.CompletedTask;

        if (!_ignoreChanges && _clientEditContext.IsModified())
        {
            _lastNavigationTarget = context.TargetLocation;

            if(!_modalShowing)
            {
                JS.InvokeVoidAsync("showModal", "unsavedChangesModal");
                _modalShowing = true;
            }

            context.PreventNavigation();
        }
        else
            JS.InvokeVoidAsync("hideModal", "unsavedChangesModal");

        return ValueTask.CompletedTask;
    }

    private void ForceNavigation()
    {
        if (_lastNavigationTarget is null)
            return;

        _ignoreChanges = true;
        Navigation.NavigateTo(_lastNavigationTarget);
    }

    public void Dispose() => _navigationLockRegistration?.Dispose();
}